#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–æ—Å–∫–∞–º–∏ –∫–æ—Å—Ç–µ–π –≤ D&D
"""

import random
import re
from typing import Dict, List, Tuple, Optional

class DiceRoller:
    """–ö–ª–∞—Å—Å –¥–ª—è –±—Ä–æ—Å–∫–æ–≤ –∫–æ—Å—Ç–µ–π D&D"""
    
    def __init__(self):
        self.dice_types = {
            'd4': 4, 'd6': 6, 'd8': 8, 'd10': 10, 
            'd12': 12, 'd20': 20, 'd100': 100
        }
    
    def roll_dice(self, dice_string: str) -> Dict:
        """
        –ë—Ä–æ—Å–∞–µ—Ç –∫–æ—Å—Ç–∏ –ø–æ —Å—Ç—Ä–æ–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞ '2d6+3' –∏–ª–∏ 'd20'
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        try:
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –±—Ä–æ—Å–∫–∞
            count, sides, modifier = self._parse_dice_string(dice_string)
            
            # –ë—Ä–æ—Å–∞–µ–º –∫–æ—Å—Ç–∏
            rolls = [random.randint(1, sides) for _ in range(count)]
            total = sum(rolls) + modifier
            
            return {
                'dice_string': dice_string,
                'count': count,
                'sides': sides,
                'modifier': modifier,
                'rolls': rolls,
                'total': total,
                'is_critical': self._check_critical(rolls, sides),
                'is_fumble': self._check_fumble(rolls, sides)
            }
        except Exception as e:
            return {
                'dice_string': dice_string,
                'error': str(e),
                'total': 0
            }
    
    def _parse_dice_string(self, dice_string: str) -> Tuple[int, int, int]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–µ–π"""
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        dice_string = dice_string.replace(' ', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç d20, d6 –∏ —Ç.–¥.
        if dice_string.startswith('d'):
            count = 1
            remaining = dice_string[1:]
        else:
            # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Å—Ç–µ–π
            match = re.match(r'^(\d+)d', dice_string)
            if not match:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±—Ä–æ—Å–∫–∞: {dice_string}")
            count = int(match.group(1))
            remaining = dice_string[match.end():]
        
        # –ò—â–µ–º —Ç–∏–ø –∫–æ—Å—Ç–∏
        match = re.match(r'^(\d+)', remaining)
        if not match:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±—Ä–æ—Å–∫–∞: {dice_string}")
        sides = int(match.group(1))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π —Ç–∏–ø –∫–æ—Å—Ç–∏
        if f'd{sides}' not in self.dice_types:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ—Å—Ç–∏: d{sides}")
        
        # –ò—â–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        modifier = 0
        remaining = remaining[match.end():]
        
        if remaining:
            if remaining.startswith('+'):
                modifier = int(remaining[1:])
            elif remaining.startswith('-'):
                modifier = -int(remaining[1:])
            else:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {remaining}")
        
        return count, sides, modifier
    
    def _check_critical(self, rolls: List[int], sides: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä (20 –Ω–∞ d20)"""
        return sides == 20 and 20 in rolls
    
    def _check_fumble(self, rolls: List[int], sides: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–∞—Ö (1 –Ω–∞ d20)"""
        return sides == 20 and 1 in rolls
    
    def roll_ability_check(self, ability_modifier: int = 0, advantage: bool = False, disadvantage: bool = False) -> Dict:
        """–ë—Ä–æ—Å–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (d20)"""
        if advantage and disadvantage:
            # –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç–º–µ–Ω—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞
            advantage = disadvantage = False
        
        if advantage:
            roll1 = self.roll_dice('d20')
            roll2 = self.roll_dice('d20')
            if roll1['total'] > roll2['total']:
                result = roll1
            else:
                result = roll2
            result['advantage'] = True
        elif disadvantage:
            roll1 = self.roll_dice('d20')
            roll2 = self.roll_dice('d20')
            if roll1['total'] < roll2['total']:
                result = roll1
            else:
                result = roll2
            result['disadvantage'] = True
        else:
            result = self.roll_dice('d20')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        result['total'] += ability_modifier
        result['ability_modifier'] = ability_modifier
        
        return result
    
    def roll_attack(self, attack_bonus: int = 0) -> Dict:
        """–ë—Ä–æ—Å–∞–µ—Ç –∞—Ç–∞–∫—É"""
        result = self.roll_dice('d20')
        result['total'] += attack_bonus
        result['attack_bonus'] = attack_bonus
        return result
    
    def roll_damage(self, damage_dice: str, damage_bonus: int = 0) -> Dict:
        """–ë—Ä–æ—Å–∞–µ—Ç —É—Ä–æ–Ω"""
        result = self.roll_dice(damage_dice)
        result['total'] += damage_bonus
        result['damage_bonus'] = damage_bonus
        return result
    
    def roll_initiative(self, dex_modifier: int = 0) -> Dict:
        """–ë—Ä–æ—Å–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É"""
        result = self.roll_dice('d20')
        result['total'] += dex_modifier
        result['dex_modifier'] = dex_modifier
        return result
    
    def format_roll_result(self, result: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if 'error' in result:
            return f"‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞: {result['error']}"
        
        dice_str = result['dice_string']
        total = result['total']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –±—Ä–æ—Å–∫–∞
        details = []
        if 'rolls' in result:
            rolls_str = ', '.join(map(str, result['rolls']))
            details.append(f"–ë—Ä–æ—Å–æ–∫: [{rolls_str}]")
        
        if 'modifier' in result and result['modifier'] != 0:
            mod_str = f"+{result['modifier']}" if result['modifier'] > 0 else str(result['modifier'])
            details.append(f"–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {mod_str}")
        
        if 'ability_modifier' in result and result['ability_modifier'] != 0:
            mod_str = f"+{result['ability_modifier']}" if result['ability_modifier'] > 0 else str(result['ability_modifier'])
            details.append(f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {mod_str}")
        
        if 'attack_bonus' in result and result['attack_bonus'] != 0:
            mod_str = f"+{result['attack_bonus']}" if result['attack_bonus'] > 0 else str(result['attack_bonus'])
            details.append(f"–ë–æ–Ω—É—Å –∞—Ç–∞–∫–∏: {mod_str}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if result.get('is_critical'):
            details.append("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–î–ê–†!")
        elif result.get('is_fumble'):
            details.append("üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–ú–ê–•!")
        
        if result.get('advantage'):
            details.append("‚ú® –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ")
        elif result.get('disadvantage'):
            details.append("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫")
        
        details_str = " | ".join(details)
        return f"üé≤ {dice_str} = {total} ({details_str})"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
dice_roller = DiceRoller()
