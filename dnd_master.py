#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–µ CLI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è D&D –º–∞—Å—Ç–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API
"""

import json
import os
import sys
from pathlib import Path
from typing import Dict, List, Optional, Set

from dotenv import load_dotenv
from openai import OpenAI
import random
import yaml
import re
from dice_system import dice_roller
from party_builder import PartyBuilder, PartyMember, PartyValidationError

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class DnDMaster:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è D&D –º–∞—Å—Ç–µ—Ä–∞"""
        self.api_key = os.getenv('OPENAI_API_KEY')
        if not self.api_key:
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç—É–¥–∞ –≤–∞—à API –∫–ª—é—á:")
            print("OPENAI_API_KEY=your_key_here")
            sys.exit(1)
        
        self.client = OpenAI(api_key=self.api_key)
        self.conversation_history = []
        self.world_bible = None
        self.game_rules = None
        self.party_state_path = Path(__file__).resolve().parent / "party_state.json"
        self.party_state_file = str(self.party_state_path)
        self.party_store = self.load_party_state()
        self.current_scenario: Optional[str] = None
        self.party_state: Optional[Dict[str, object]] = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
        self.load_game_rules()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–∏–±–ª–∏—é –º–∏—Ä–∞
        self.initialize_world_bible()
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è D&D –º–∞—Å—Ç–µ—Ä–∞
        self.system_prompt = f"""–¢—ã –æ–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä D&D. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≤–µ—Å—Ç–∏ –∏–≥—Ä—É, —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –ø–æ–º–æ–≥–∞—Ç—å –∏–≥—Ä–æ–∫–∞–º. 
        –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ä–æ–ª–∏ –º–∞—Å—Ç–µ—Ä–∞ –∏–≥—Ä—ã. –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º, –Ω–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–º. 
        –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —Ä–µ–∞–≥–∏—Ä—É–π –∫–∞–∫ –º–∞—Å—Ç–µ—Ä –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.
        –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –∏–ª–∏ –º–∏—Ä–µ, –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ –∑–Ω–∞—é—â–∏–π –º–∞—Å—Ç–µ—Ä.
        
        –ü–†–ê–í–ò–õ–ê –ò–ì–†–´:
        - –í—Å–µ–≥–¥–∞ –±—Ä–æ—Å–∞–π –∫–æ—Å—Ç–∏ –∑–∞ –∫–∞–¥—Ä–æ–º –∏ —Å–æ–æ–±—â–∞–π –≥–æ—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        - –ò—Å–ø–æ–ª—å–∑—É–π —à–∫–∞–ª—É —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π: –¢—Ä–∏–≤–∏–∞–ª—å–Ω–∞—è(5), –õ–µ–≥–∫–∞—è(10), –°—Ä–µ–¥–Ω—è—è(15), –°–ª–æ–∂–Ω–∞—è(20), –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–∞—è(25), –ü–æ—á—Ç–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞—è(30)
        - –î–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–π d20 + –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        - –î–ª—è –∞—Ç–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–π d20 + –±–æ–Ω—É—Å –∞—Ç–∞–∫–∏ –ø—Ä–æ—Ç–∏–≤ –ö–ª–∞—Å—Å–∞ –ë—Ä–æ–Ω–∏ (AC)
        - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä –Ω–∞ 20, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–∞—Ö –Ω–∞ 1
        - –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤: 50-200 —Å–ª–æ–≤, –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ 100 —Å–ª–æ–≤
        
        –í–ê–ñ–ù–û: –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π –ø—Ä–∞–≤–∏–ª–∞–º –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º –º–∏—Ä–∞ –∏–∑ –ë–∏–±–ª–∏–∏ –º–∏—Ä–∞:
        {self.world_bible if self.world_bible else "–ë–∏–±–ª–∏—è –º–∏—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"}
        
        –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –Ω–∞—Ä—É—à–∞–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –º–∏—Ä–∞ –∏ —Å–ª–µ–¥—É–π –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ç–æ–Ω—É –∏ —Å—Ç–∏–ª—é."""
    
    def load_game_rules(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∏–∑ rules.yaml"""
        try:
            with open('rules.yaml', 'r', encoding='utf-8') as f:
                self.game_rules = yaml.safe_load(f)
            print("üìã –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–≤–∏–ª: {e}")
            self.game_rules = {}

    def load_party_state(self) -> Dict[str, object]:
        """Load stored parties for all scenarios, migrating old format if needed."""
        default_store: Dict[str, object] = {"scenarios": {}}
        if self.party_state_path.exists():
            try:
                with open(self.party_state_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                if isinstance(data, dict) and "scenarios" in data:
                    scenarios = data.get("scenarios", {})
                    if isinstance(scenarios, dict):
                        return {"scenarios": scenarios}
                if isinstance(data, dict) and "party" in data:
                    return {"scenarios": {"default": data}}
            except Exception as error:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–∞—Ä—Ç–∏—é: {error}")
        else:
            try:
                with open(self.party_state_file, 'w', encoding='utf-8') as f:
                    json.dump(default_store, f, ensure_ascii=False, indent=2)
            except Exception as error:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–π: {error}")
        return default_store

    def save_party_state(self) -> None:
        """Persist all stored scenario parties to disk."""
        try:
            with open(self.party_state_file, 'w', encoding='utf-8') as f:
                json.dump(self.party_store, f, ensure_ascii=False, indent=2)
        except Exception as error:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä—Ç–∏—é: {error}")

    @property
    def party_initialized(self) -> bool:
        if not isinstance(self.party_state, dict):
            return False
        flags = (
            self.party_state.get("state_delta", {})
            .get("flags", {})
            .get("set", [])
        )
        return bool(flags and "party_initialized" in flags)

    def has_saved_party_members(self) -> bool:
        scenarios = self.party_store.get("scenarios", {})
        if not isinstance(scenarios, dict):
            return False
        for payload in scenarios.values():
            if not isinstance(payload, dict):
                continue
            flags = (
                payload.get("state_delta", {})
                .get("flags", {})
                .get("set", [])
            )
            if isinstance(flags, list) and "party_initialized" in flags:
                return True
        return False

    def ensure_party_initialized(self) -> None:
        """Guide the user through party creation if no party exists."""
        self._ensure_scenario_selected()
        if self.party_initialized:
            print("–ü–∞—Ä—Ç–∏—è —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è.")
            return

        try:
            payload = self._run_party_creation_flow()
        except KeyboardInterrupt:
            print("\n–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            sys.exit(0)
        except PartyValidationError as error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä—Ç–∏–∏: {error}")
            sys.exit(1)

        if payload:
            self.party_state = payload
            scenarios = self.party_store.setdefault("scenarios", {})
            if self.current_scenario:
                scenarios[self.current_scenario] = payload
            self.save_party_state()
            print("\n–ü–∞—Ä—Ç–∏—è –≥–æ—Ç–æ–≤–∞. –í–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Ü–µ–Ω—É.")

    def _run_party_creation_flow(self) -> Dict[str, object]:
        scenario_label = self.current_scenario or "–Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"
        print(f"–°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {scenario_label}")

        party_size = self._prompt_party_size()
        builder = PartyBuilder()
        existing_ids: Set[str] = set()

        for index in range(1, party_size + 1):
            print(f"\n–ü–µ—Ä—Å–æ–Ω–∞–∂ {index} –∏–∑ {party_size}:")
            member = self._collect_member_data(index, existing_ids)
            builder.add_member(member)
            existing_ids.add(member.id)

        coin = self._prompt_optional_int(
            "–°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç —É –ø–∞—Ä—Ç–∏–∏? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0): ",
            minimum=0,
            default=0,
        )
        rations = self._prompt_optional_int(
            "–°–∫–æ–ª—å–∫–æ –ø–∞–π–∫–æ–≤ —É –ø–∞—Ä—Ç–∏–∏? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0): ",
            minimum=0,
            default=0,
        )
        party_tags = self._prompt_party_tags()

        builder.coin = coin
        builder.rations = rations
        builder.party_tags = party_tags

        payload = builder.build_payload()

        json_text = json.dumps(payload, ensure_ascii=False, indent=2)
        print(json_text)
        for line in payload["party_compact"]:
            print(line)

        return payload

    def _ensure_scenario_selected(self) -> None:
        if self.current_scenario:
            return

        scenarios = self.party_store.get("scenarios", {})
        scenario_names = list(scenarios.keys())
        if scenario_names:
            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:")
            for idx, name in enumerate(scenario_names, start=1):
                print(f"  {idx}. {name}")

        prompt = (
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–ª–∏ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞: "
            if scenario_names
            else "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è: "
        )

        while True:
            choice = input(prompt).strip()
            if not choice:
                print("–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
                continue

            if scenario_names and choice.isdigit():
                index = int(choice)
                if 1 <= index <= len(scenario_names):
                    self.current_scenario = scenario_names[index - 1]
                    break
                print("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
                continue

            self.current_scenario = choice
            break

        if self.current_scenario in scenarios:
            stored = scenarios[self.current_scenario]
            if isinstance(stored, dict):
                self.party_state = stored

    def _prompt_party_size(self) -> int:
        while True:
            raw = input("–°–∫–æ–ª—å–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –±—É–¥–µ—Ç –≤ —ç—Ç–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏? (1-3): ").strip()
            if not raw:
                print("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3.")
                continue
            if raw.isdigit():
                value = int(raw)
                if 1 <= value <= 3:
                    return value
            print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 3.")

    def _collect_member_data(self, index: int, existing_ids: Set[str]) -> PartyMember:
        name = self._prompt_non_empty("–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ")
        role = self._prompt_non_empty("–†–æ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ")
        concept = self._prompt_non_empty("–ö–æ—Ä–æ—Ç–∫–æ –æ –∫–æ–Ω—Ü–µ–ø—Ç–µ: ")

        stats: Dict[str, int] = {}
        stat_order = [
            ("str", "–°–∏–ª–∞"),
            ("dex", "–õ–æ–≤–∫–æ—Å—Ç—å"),
            ("int", "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç"),
            ("wit", "–°–æ–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"),
            ("charm", "–û–±–∞—è–Ω–∏–µ"),
        ]
        for key, label in stat_order:
            stats[key] = self._prompt_int(
                f"{label} ({-1} –¥–æ {3}): ",
                minimum=-1,
                maximum=3,
            )

        hp = self._prompt_int("HP (8-14): ", minimum=8, maximum=14)

        traits = self._prompt_fixed_list(
            "–£–∫–∞–∂–∏ –¥–≤–µ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ",
            expected_count=2,
        )
        loadout = self._prompt_fixed_list(
            "–£–∫–∞–∂–∏ –¥–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ",
            expected_count=2,
        )
        tags = self._prompt_tags(
            "–£–∫–∞–∂–∏ 1-2 —Ç–µ–≥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ",
            minimum=1,
            maximum=2,
        )

        member_id = self._generate_member_id(name, existing_ids, index)

        return PartyMember(
            id=member_id,
            name=name,
            role=role,
            concept=concept,
            stats=stats,
            traits=traits,
            loadout=loadout,
            hp=hp,
            tags=tags,
        )

    def _prompt_non_empty(self, prompt: str) -> str:
        while True:
            value = input(prompt).strip()
            if value:
                return value
            print("–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")

    def _prompt_int(
        self,
        prompt: str,
        *,
        minimum: Optional[int] = None,
        maximum: Optional[int] = None,
    ) -> int:
        while True:
            raw = input(prompt).strip()
            try:
                value = int(raw)
            except ValueError:
                print("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
                continue
            if minimum is not None and value < minimum:
                print(f"–ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ {minimum}.")
                continue
            if maximum is not None and value > maximum:
                print(f"–ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ {maximum}.")
                continue
            return value

    def _prompt_optional_int(
        self,
        prompt: str,
        *,
        minimum: Optional[int] = None,
        maximum: Optional[int] = None,
        default: int = 0,
    ) -> int:
        while True:
            raw = input(prompt).strip()
            if not raw:
                return default
            try:
                value = int(raw)
            except ValueError:
                print("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É –ø—É—Å—Ç–æ–π.")
                continue
            if minimum is not None and value < minimum:
                print(f"–ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ {minimum}.")
                continue
            if maximum is not None and value > maximum:
                print(f"–ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ {maximum}.")
                continue
            return value

    def _prompt_fixed_list(self, prompt: str, *, expected_count: int) -> List[str]:
        while True:
            raw = input(prompt).strip()
            items = [item.strip() for item in re.split(r'[;,/]+', raw) if item.strip()]
            if len(items) == expected_count:
                return items
            print(f"–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ä–æ–≤–Ω–æ {expected_count} —ç–ª–µ–º–µ–Ω—Ç–∞(–æ–≤).")

    def _prompt_tags(
        self,
        prompt: str,
        *,
        minimum: int,
        maximum: int,
    ) -> List[str]:
        while True:
            raw = input(prompt).strip()
            items = [item.strip() for item in re.split(r'[;,]+', raw) if item.strip()]
            if minimum <= len(items) <= maximum:
                return items
            print(f"–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –æ—Ç {minimum} –¥–æ {maximum} —Ç–µ–≥–æ–≤.")

    def _prompt_party_tags(self) -> List[str]:
        prompt = (
            "–û–ø–∏—à–∏ —Å—Ç–∏–ª—å –ø–∞—Ä—Ç–∏–∏ —Ç–µ–≥–∞–º–∏ (–¥–æ 3, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é adventure): "
        )
        while True:
            raw = input(prompt).strip()
            if not raw:
                return ["adventure"]
            tags = [item.strip() for item in re.split(r'[;,]+', raw) if item.strip()]
            if 1 <= len(tags) <= 3:
                return tags
            print("–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –æ—Ç 1 –¥–æ 3 —Ç–µ–≥–æ–≤.")

    def _generate_member_id(
        self,
        name: str,
        existing_ids: Set[str],
        index: int,
    ) -> str:
        base = self._slugify_tag(name) or f"pc_{index}"
        candidate = f"pc_{base}" if not base.startswith("pc_") else base
        suffix = 1
        final_id = candidate
        while final_id in existing_ids:
            suffix += 1
            final_id = f"{candidate}_{suffix}"
        return final_id

    def _slugify_tag(self, text: str) -> str:
        translit_map = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'h', '—Ü': 'c', '—á': 'ch', '—à': 'sh', '—â': 'sch', '—ä': '',
            '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
        }
        result = []
        for char in text.lower():
            if char in translit_map:
                result.append(translit_map[char])
            elif char.isalnum() and char.isascii():
                result.append(char)
        slug = ''.join(result)
        slug = re.sub(r'[^a-z0-9]+', '', slug)
        return slug

    def initialize_world_bible(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ë–∏–±–ª–∏–∏ –º–∏—Ä–∞"""
        bible_file = "world_bible.md"
        
        if os.path.exists(bible_file):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ë–∏–±–ª–∏—é –º–∏—Ä–∞
            try:
                with open(bible_file, 'r', encoding='utf-8') as f:
                    self.world_bible = f.read()
                print("üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ë–∏–±–ª–∏—è –º–∏—Ä–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ë–∏–±–ª–∏–∏ –º–∏—Ä–∞: {e}")
                self.generate_world_bible()
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ë–∏–±–ª–∏—é –º–∏—Ä–∞
            print("üåç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –ë–∏–±–ª–∏—è –º–∏—Ä–∞...")
            self.generate_world_bible()
    
    def generate_world_bible(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –ë–∏–±–ª–∏—é –º–∏—Ä–∞"""
        try:
            # –°–ª—É—á–∞–π–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞
            settings = [
                "–§—ç–Ω—Ç–µ–∑–∏ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å—Ç–∏–º–ø–∞–Ω–∫–∞",
                "–¢–µ–º–Ω–æ–µ —Ñ—ç–Ω—Ç–µ–∑–∏ —Å –≥–æ—Ç–∏—á–µ—Å–∫–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏", 
                "–ö–∏–±–µ—Ä–ø–∞–Ω–∫ —Å –º–∞–≥–∏–µ–π",
                "–ü–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Ç–∏—á–µ—Å–∫–æ–µ —Ñ—ç–Ω—Ç–µ–∑–∏",
                "–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤–æ–µ —Ñ—ç–Ω—Ç–µ–∑–∏ —Å –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Ç—Ä–∏–≥–∞–º–∏",
                "–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Ä–µ–∞–ª–∏–∑–º –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ",
                "–°–∫–∞–∑–æ—á–Ω–æ–µ —Ñ—ç–Ω—Ç–µ–∑–∏ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ö–æ—Ä—Ä–æ—Ä–∞"
            ]
            
            tones = [
                "–º—Ä–∞—á–Ω—ã–π –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π",
                "–≥–µ—Ä–æ–∏—á–µ—Å–∫–∏–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π", 
                "–∑–∞–≥–∞–¥–æ—á–Ω—ã–π –∏ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π",
                "—ç–ø–∏—á–µ—Å–∫–∏–π –∏ –¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π",
                "–∏–Ω—Ç—Ä–∏–≥—É—é—â–∏–π –∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π",
                "—Ç–µ–º–Ω—ã–π –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–π",
                "—Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–∏–π"
            ]
            
            genres = [
                "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ö–æ—Ä—Ä–æ—Ä–∞",
                "–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç—Ä–∏–≥–∏ —Å –º–∞–≥–∏–µ–π",
                "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥—Ä–µ–≤–Ω–∏—Ö —Ä—É–∏–Ω",
                "–≤–æ–π–Ω–∞ –º–µ–∂–¥—É —Ñ—Ä–∞–∫—Ü–∏—è–º–∏",
                "–º–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
                "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏",
                "–≤—ã–∂–∏–≤–∞–Ω–∏–µ –≤ –æ–ø–∞—Å–Ω—ã—Ö –∑–µ–º–ª—è—Ö"
            ]
            
            selected_setting = random.choice(settings)
            selected_tone = random.choice(tones)
            selected_genre = random.choice(genres)
            
            world_prompt = f"""–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é –ë–∏–±–ª–∏—é –º–∏—Ä–∞ –¥–ª—è D&D –∫–∞–º–ø–∞–Ω–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

# –ë–ò–ë–õ–ò–Ø –ú–ò–†–ê

## –°–ï–¢–¢–ò–ù–ì
{selected_setting}

## –¢–û–ù –ò –°–¢–ò–õ–¨
–¢–æ–Ω –∫–∞–º–ø–∞–Ω–∏–∏: {selected_tone}
–ñ–∞–Ω—Ä–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞: {selected_genre}

## –í–ï–õ–ò–ö–ò–ï –¢–ê–ë–£ (—á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å –≤ —ç—Ç–æ–º –º–∏—Ä–µ)
- [3-4 —Ç–∞–±—É, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –º–∞–≥–∏–µ–π, —Ä–µ–ª–∏–≥–∏–µ–π –∏–ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –Ω–æ—Ä–º–∞–º–∏]

## –°–¢–ê–†–¢–û–í–ê–Ø –õ–û–ö–ê–¶–ò–Ø
- –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ
- –ö–ª—é—á–µ–≤—ã–µ NPC –∏ –∏—Ö —Ä–æ–ª–∏
- –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏

## –ö–õ–Æ–ß–ï–í–´–ï –§–†–ê–ö–¶–ò–ò
- [4-5 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—Ä–∞–∫—Ü–∏–π —Å –∏—Ö —Ü–µ–ª—è–º–∏, –º–µ—Ç–æ–¥–∞–º–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏]

## –ú–ò–†–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –Ω–∞—Ä—É—à–∞–π —ç—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞!)
1. [–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω –º–∏—Ä–∞]
2. [–ú–∞–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ]
3. [–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞]
4. [–ü—Ä–∏—Ä–æ–¥–Ω—ã–π –∑–∞–∫–æ–Ω]
5. [–†–µ–ª–∏–≥–∏–æ–∑–Ω–∞—è –¥–æ–≥–º–∞]
6. [–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –∏—Å—Ç–∏–Ω–∞]
7. [–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–Ω—Ü–∏–ø]

–°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –º–∏—Ä —Å —á–µ—Ç–∫–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π. –í—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–æ–≥–∏—á–Ω–æ —Å–≤—è–∑–∞–Ω–æ –º–µ–∂–¥—É —Å–æ–±–æ–π."""

            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": world_prompt}],
                max_tokens=2000,
                temperature=0.9
            )
            
            self.world_bible = response.choices[0].message.content
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ë–∏–±–ª–∏—é –º–∏—Ä–∞ –≤ —Ñ–∞–π–ª
            with open("world_bible.md", 'w', encoding='utf-8') as f:
                f.write(self.world_bible)
            
            print("‚úÖ –ë–∏–±–ª–∏—è –º–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ë–∏–±–ª–∏–∏ –º–∏—Ä–∞: {e}")
            self.world_bible = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–∏–±–ª–∏–∏ –º–∏—Ä–∞"
    
    def detect_and_roll_dice(self, user_input: str) -> list:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω—ã –ª–∏ –±—Ä–æ—Å–∫–∏ –∫–æ—Å—Ç–µ–π –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Ö"""
        dice_results = []
        
        # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—Ä–æ—Å–∫–æ–≤
        auto_roll_keywords = {
            '–∞—Ç–∞–∫–∞': ('d20', 0),
            '—É—Ä–æ–Ω': ('d8', 0),
            '–ø—Ä–æ–≤–µ—Ä–∫–∞': ('d20', 0),
            '—Å–ø–∞—Å–±—Ä–æ—Å–æ–∫': ('d20', 0),
            '–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞': ('d20', 0),
            '—Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å': ('d20', 0),
            '–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ': ('d20', 0),
            '–º–∞–≥–∏—è': ('d20', 0),
            '—É–±–µ–∂–¥–µ–Ω–∏–µ': ('d20', 0),
            '–∑–∞–ø—É–≥–∏–≤–∞–Ω–∏–µ': ('d20', 0),
            '–∞—Ç–ª–µ—Ç–∏–∫–∞': ('d20', 0),
            '–∞–∫—Ä–æ–±–∞—Ç–∏–∫–∞': ('d20', 0),
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        for keyword, (dice_type, modifier) in auto_roll_keywords.items():
            if keyword in user_input.lower():
                result = dice_roller.roll_dice(f"{dice_type}+{modifier}")
                dice_results.append(dice_roller.format_roll_result(result))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±—Ä–æ—Å–∫–æ–≤
        dice_patterns = [
            r'–±—Ä–æ—Å–∞—é?\s+(d\d+)',
            r'–∫–∏–¥–∞—é?\s+(d\d+)',
            r'–±—Ä–æ—Å–æ–∫\s+(d\d+)',
            r'(\d*d\d+\+?\d*)',
        ]
        
        for pattern in dice_patterns:
            matches = re.findall(pattern, user_input.lower())
            for match in matches:
                if isinstance(match, tuple):
                    match = match[0]
                result = dice_roller.roll_dice(match)
                dice_results.append(dice_roller.format_roll_result(result))
        
        return dice_results
    
    def get_master_response(self, user_input):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–∞—Å—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ OpenAI API"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({"role": "user", "content": user_input})
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
            messages = [{"role": "system", "content": self.system_prompt}]
            messages.extend(self.conversation_history[-10:])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=messages,
                max_tokens=500,
                temperature=0.8
            )
            
            master_response = response.choices[0].message.content
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–∞—Å—Ç–µ—Ä–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({"role": "assistant", "content": master_response})
            
            return master_response
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {str(e)}"
    
    def show_world_bible(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ë–∏–±–ª–∏—é –º–∏—Ä–∞ –≤ CLI"""
        if not self.world_bible:
            print("‚ùå –ë–∏–±–ª–∏—è –º–∏—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return
            
        print("\n" + "="*60)
        print("üìñ –ë–ò–ë–õ–ò–Ø –ú–ò–†–ê")
        print("="*60)
        print(self.world_bible)
        print("="*60)
        print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        input()
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ D&D —Å AI –º–∞—Å—Ç–µ—Ä–æ–º! üé≤")
        print("–ú–∏—Ä —É–∂–µ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º!")
        print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã. –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'quit' –∏–ª–∏ 'exit'")
        print("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ë–∏–±–ª–∏–∏ –º–∏—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ '–º–∏—Ä' –∏–ª–∏ 'bible'")
        print("-" * 50)

        if self.has_saved_party_members():
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –≤ party_state.json.")

        self.ensure_party_initialized()

        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_input = input("\nüë§ –ò–≥—Ä–æ–∫: ").strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
                if user_input.lower() in ['quit', 'exit', '–≤—ã—Ö–æ–¥']:
                    print("\nüé≤ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ë–∏–±–ª–∏–∏ –º–∏—Ä–∞
                if user_input.lower() in ['–º–∏—Ä', 'bible', '–±–∏–±–ª–∏—è']:
                    self.show_world_bible()
                    continue
                
                if not user_input:
                    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á—Ç–æ-—Ç–æ...")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–æ—Å–∫–∏ –∫–æ—Å—Ç–µ–π
                dice_results = self.detect_and_roll_dice(user_input)
                if dice_results:
                    print("\nüé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–æ–≤:")
                    for result in dice_results:
                        print(f"  {result}")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–∞—Å—Ç–µ—Ä–∞
                print("\nüé≠ –ú–∞—Å—Ç–µ—Ä –¥—É–º–∞–µ—Ç...")
                master_response = self.get_master_response(user_input)
                
                print(f"\nüé≠ –ú–∞—Å—Ç–µ—Ä: {master_response}")
                
            except KeyboardInterrupt:
                print("\n\nüé≤ –ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    master = DnDMaster()
    master.run()

if __name__ == "__main__":
    main()

