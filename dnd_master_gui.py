#!/usr/bin/env python3
"""
GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è D&D –º–∞—Å—Ç–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API
"""

import json
import os
import sys
import tkinter as tk
from pathlib import Path
from tkinter import ttk, scrolledtext, messagebox, simpledialog
from typing import Callable, Dict, List, Optional, Set
from dotenv import load_dotenv
from openai import OpenAI
import threading
import random
import yaml
import re
from dice_system import dice_roller
from party_builder import PartyBuilder, PartyMember, PartyValidationError

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class DnDMasterGUI:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root = tk.Tk()
        self.root.title("üé≤ D&D Master AI")

        # –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –∏ —à—Ä–∏—Ñ—Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω—ã –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–≥–æ D&D
        self.theme = {
            "bg_dark": "#1b1410",
            "bg_panel": "#241a16",
            "bg_card": "#f7f0d6",
            "bg_input": "#f2e8cf",
            "accent": "#c08429",
            "accent_light": "#e7c46b",
            "accent_muted": "#9c6b30",
            "button_primary": "#7b3f00",
            "button_secondary": "#5b2d10",
            "button_danger": "#7d1f1a",
            "button_text": "#000000",
            "text_light": "#6f6c66",
            "text_dark": "#2d1b10",
            "text_muted": "#d2b792",
            "dice_highlight": "#3f6e88"
        }
        self.fonts = {
            "title": ("Georgia", 20, "bold"),
            "subtitle": ("Georgia", 12, "bold"),
            "text": ("Georgia", 11),
            "button": ("Georgia", 11, "bold")
        }

        self.configure_theme()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        self.api_key = os.getenv('OPENAI_API_KEY')
        if not self.api_key:
            messagebox.showerror("–û—à–∏–±–∫–∞", 
                               "–ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!\n"
                               "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç—É–¥–∞ –≤–∞—à API –∫–ª—é—á:\n"
                               "OPENAI_API_KEY=your_key_here")
            sys.exit(1)
        
        self.client = OpenAI(api_key=self.api_key)
        self.party_state_path = Path(__file__).resolve().parent / "party_state.json"
        self.party_state_file = str(self.party_state_path)
        self.party_store: Dict[str, object] = self.load_party_state()
        self.current_scenario: Optional[str] = None
        self.party_state: Optional[Dict[str, object]] = None
        self.conversation_history = []
        self.world_bible = None
        self.game_rules = None
        self.story_arc = None
        self.story_file = "story_arc.md"
        self.session_mode = "new"
        self.story_status_message = ""
        self.last_error_message = ""
        self.active_dice_challenge: Optional[Dict[str, object]] = None
        self.models = {
            "world": os.getenv("DND_WORLD_MODEL", "gpt-4o-mini"),
            "story": os.getenv("DND_STORY_MODEL", "gpt-4o-mini"),
            "master": os.getenv("DND_MASTER_MODEL", "gpt-4o-mini"),
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
        self.load_game_rules()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–∏–±–ª–∏—é –º–∏—Ä–∞
        self.initialize_world_bible()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—é–∂–µ—Ç –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
        self.initialize_story_arc()

        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è D&D –º–∞—Å—Ç–µ—Ä–∞
        self.update_system_prompt()

        self.challenge_desc_var = tk.StringVar(value="")
        self.challenge_target_var = tk.StringVar(value="")
        self.challenge_hint_var = tk.StringVar(value="")
        self.setup_ui()
        self.stat_points_limit = 6
        self.root.after(0, self.ensure_party_initialized)

    def configure_theme(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ–∫–Ω–∞."""
        self.root.geometry("1200x800")
        self.root.configure(bg=self.theme["bg_dark"])
        self.root.option_add("*Font", self.fonts["text"])
        self.root.option_add("*Foreground", self.theme["text_light"])
        self.root.option_add("*Background", self.theme["bg_dark"])
    
    def load_game_rules(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∏–∑ rules.yaml"""
        try:
            with open('rules.yaml', 'r', encoding='utf-8') as f:
                self.game_rules = yaml.safe_load(f)
            print("üìã –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–≤–∏–ª: {e}")
            self.game_rules = {}

    def load_party_state(self) -> Dict[str, object]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏, —Å–æ–∑–¥–∞–≤–∞—è –∏–ª–∏ –º–∏–≥—Ä–∏—Ä—É—è —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        default_store: Dict[str, object] = {"scenarios": {}}
        migrated_store: Optional[Dict[str, object]] = None
        if self.party_state_path.exists():
            try:
                with open(self.party_state_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                if isinstance(data, dict) and "scenarios" in data:
                    scenarios = data.get("scenarios", {})
                    if isinstance(scenarios, dict):
                        migrated_store = {"scenarios": scenarios}
                elif isinstance(data, dict) and "party" in data:
                    migrated_store = {"scenarios": {"default": data}}
            except Exception as error:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–∞—Ä—Ç–∏—é: {error}")

        store = migrated_store or default_store
        if not self.party_state_path.exists() or migrated_store is None:
            try:
                with open(self.party_state_file, 'w', encoding='utf-8') as f:
                    json.dump(store, f, ensure_ascii=False, indent=2)
            except Exception as error:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–π: {error}")
        return store

    def save_party_state(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–∏–π –Ω–∞ –¥–∏—Å–∫."""
        try:
            with open(self.party_state_file, 'w', encoding='utf-8') as f:
                json.dump(self.party_store, f, ensure_ascii=False, indent=2)
        except Exception as error:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä—Ç–∏—é: {error}")

    @property
    def party_initialized(self) -> bool:
        if not isinstance(self.party_state, dict):
            return False
        flags = (
            self.party_state.get("state_delta", {})
            .get("flags", {})
            .get("set", [])
        )
        return bool(flags and "party_initialized" in flags)

    def ensure_party_initialized(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."""
        self._ensure_scenario_selected()
        if self.party_initialized:
            messagebox.showinfo(
                "–ü–∞—Ä—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞",
                f"–°—Ü–µ–Ω–∞—Ä–∏–π '{self.current_scenario}' —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."
            )
            return

        scenario_name = self.current_scenario or "default"
        messagebox.showinfo(
            "–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π",
            f"–î–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è '{scenario_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏. –°–æ–∑–¥–∞–¥–∏–º –∏—Ö —Å–µ–π—á–∞—Å."
        )

        try:
            payload = self._run_party_creation_flow()
        except PartyValidationError as error:
            messagebox.showerror(
                "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Ç–∏—é: {error}"
            )
            return

        if payload:
            scenarios = self.party_store.setdefault("scenarios", {})
            scenario_key = self.current_scenario or "default"
            self.current_scenario = scenario_key
            scenarios[scenario_key] = payload
            self.party_state = payload
            self.save_party_state()

            scene_description = self._prompt_first_scene_description(scenario_key)
            self.party_state["initial_scene"] = scene_description
            scenarios[scenario_key] = self.party_state
            self.save_party_state()

            self.add_to_chat("üé≠ –ú–∞—Å—Ç–µ—Ä", f"–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ü–µ–Ω–∞:\n{scene_description}")

    def _ensure_scenario_selected(self) -> None:
        if self.current_scenario:
            return

        scenarios = self.party_store.get("scenarios", {})
        scenario_names = list(scenarios.keys())

        prompt_lines = []
        if scenario_names:
            prompt_lines.append("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:")
            for idx, name in enumerate(scenario_names, start=1):
                prompt_lines.append(f"{idx}. {name}")
            prompt_lines.append("")
            prompt_lines.append("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–ª–∏ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
        else:
            prompt_lines.append("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é default).")

        while True:
            choice = simpledialog.askstring(
                "–í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è",
                "\n".join(prompt_lines),
                parent=self.root
            )
            if choice is None:
                if scenario_names:
                    messagebox.showwarning("–°—Ü–µ–Ω–∞—Ä–∏–π", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã.")
                    continue
                choice = "default"

            choice = choice.strip()
            if not choice:
                if scenario_names:
                    messagebox.showwarning("–°—Ü–µ–Ω–∞—Ä–∏–π", "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
                    continue
                choice = "default"

            if scenario_names and choice.isdigit():
                index = int(choice)
                if 1 <= index <= len(scenario_names):
                    self.current_scenario = scenario_names[index - 1]
                    break
                messagebox.showwarning("–°—Ü–µ–Ω–∞—Ä–∏–π", "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
                continue

            self.current_scenario = choice
            break

        if self.current_scenario in scenarios:
            stored = scenarios[self.current_scenario]
            if isinstance(stored, dict):
                self.party_state = stored

    def _run_party_creation_flow(self) -> Dict[str, object]:
        scenario_label = self.current_scenario or "–Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"
        builder = PartyBuilder()
        party_size = self._prompt_party_size()
        existing_ids: Set[str] = set()

        for index in range(1, party_size + 1):
            messagebox.showinfo(
                "–ü–µ—Ä—Å–æ–Ω–∞–∂",
                (
                    f"–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {index} –∏–∑ {party_size}.\n"
                    "–°–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —à–∞–≥–∏: –∏–º—è, —Ä–æ–ª—å, –∫–æ–Ω—Ü–µ–ø—Ç, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —á–µ—Ä—Ç—ã, —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –∏ —Ç–µ–≥–∏.\n"
                    "–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—É—á–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π."
                ),
            )
            member = self._collect_member_data(index, existing_ids)
            builder.add_member(member)
            existing_ids.add(member.id)

        coin = self._prompt_optional_int(
            (
                "–°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç —É –ø–∞—Ä—Ç–∏–∏? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)\n"
                "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –º–æ–Ω–µ—Ç—ã –æ—Ç—Ä–∞–∂–∞—é—Ç –æ–±—â–∏–π –∫–æ—à–µ–ª—ë–∫ –≥—Ä—É–ø–ø—ã.\n"
                "–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã, —Å–º–µ–ª–æ –≤–≤–µ–¥–∏—Ç–µ 0 –∏–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –ø—Ä–∏–º–µ—Ä—ã:\n"
                "0 ‚Äî –Ω–∏—â–∞—è –≥—Ä—É–ø–ø–∞; 10 ‚Äî –µ—Å—Ç—å –Ω–µ–º–Ω–æ–≥–æ —Å–µ—Ä–µ–±—Ä–∞; 25 ‚Äî –ø—Ä–∏–ª–∏—á–Ω–∞—è —Å—É–º–º–∞."
            ),
            minimum=0,
            default=0,
        )
        rations = self._prompt_optional_int(
            (
                "–°–∫–æ–ª—å–∫–æ –ø–∞–π–∫–æ–≤ —É –ø–∞—Ä—Ç–∏–∏? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)\n"
                "–ü–∞–π–∫–∏ ‚Äî –∑–∞–ø–∞—Å –≥–æ—Ç–æ–≤–æ–π –µ–¥—ã –Ω–∞ –¥–µ–Ω—å –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã.\n"
                "–ü—Ä–∏–º–µ—Ä—ã: 0 ‚Äî –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –∏—Å–∫–∞—Ç—å –ø—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ; 3 ‚Äî –µ–¥–∞ –Ω–∞ –ø–∞—Ä—É –¥–Ω–µ–π; 7 ‚Äî —Å–µ—Ä—å—ë–∑–Ω—ã–µ –∑–∞–ø–∞—Å—ã."
            ),
            minimum=0,
            default=0,
        )
        party_tags = self._prompt_party_tags()

        builder.coin = coin
        builder.rations = rations
        builder.party_tags = party_tags

        payload = builder.build_payload()

        json_text = json.dumps(payload, ensure_ascii=False, indent=2)
        print(json_text)
        for line in payload["party_compact"]:
            print(line)

        self._show_party_summary(json_text, payload["party_compact"], scenario_label)

        return payload

    def _prompt_party_size(self) -> int:
        while True:
            value = simpledialog.askinteger(
                "–†–∞–∑–º–µ—Ä –ø–∞—Ä—Ç–∏–∏",
                (
                    "–°–∫–æ–ª—å–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –±—É–¥–µ—Ç –≤ —ç—Ç–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏? (1-3)\n"
                    "–ü–æ—è—Å–Ω–µ–Ω–∏–µ: –≤ —ç—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–∂–Ω–æ –≤–µ—Å—Ç–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –¥–æ —Ç—Ä—ë—Ö –≥–µ—Ä–æ–µ–≤.\n"
                    "1 ‚Äî —Å–æ–ª—å–Ω—ã–π –≥–µ—Ä–æ–π; 2 ‚Äî –¥—É—ç—Ç —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Ä–æ–ª–µ–π; 3 ‚Äî –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."
                ),
                parent=self.root,
                minvalue=1,
                maxvalue=3,
            )
            if value is None:
                messagebox.showwarning("–†–∞–∑–º–µ—Ä –ø–∞—Ä—Ç–∏–∏", "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –æ—Ç 1 –¥–æ 3.")
                continue
            return value

    def _collect_member_data(self, index: int, existing_ids: Set[str]) -> PartyMember:
        while True:
            dialog = CharacterFormDialog(
                self.root,
                index=index,
                theme=self.theme,
                fonts=self.fonts,
                stats_limit=self.stat_points_limit,
            )
            result = dialog.show()
            if result is None:
                continue

            member_id = self._generate_member_id(result["name"], existing_ids, index)
            return PartyMember(
                id=member_id,
                name=result["name"],
                role=result["role"],
                concept=result["concept"],
                stats=result["stats"],
                traits=result["traits"],
                loadout=result["loadout"],
                hp=result["hp"],
                tags=result["tags"],
            )

    def _prompt_optional_int(
        self,
        prompt: str,
        *,
        minimum: Optional[int] = None,
        maximum: Optional[int] = None,
        default: int = 0,
    ) -> int:
        while True:
            raw = simpledialog.askstring("–†–µ—Å—É—Ä—Å—ã –ø–∞—Ä—Ç–∏–∏", prompt, parent=self.root)
            if raw is None:
                return default
            raw = raw.strip()
            if not raw:
                return default
            try:
                value = int(raw)
            except ValueError:
                messagebox.showwarning("–†–µ—Å—É—Ä—Å—ã –ø–∞—Ä—Ç–∏–∏", "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º.")
                continue
            if minimum is not None and value < minimum:
                messagebox.showwarning("–†–µ—Å—É—Ä—Å—ã –ø–∞—Ä—Ç–∏–∏", f"–ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ {minimum}.")
                continue
            if maximum is not None and value > maximum:
                messagebox.showwarning("–†–µ—Å—É—Ä—Å—ã –ø–∞—Ä—Ç–∏–∏", f"–ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ {maximum}.")
                continue
            return value

    def _prompt_party_tags(self) -> List[str]:
        prompt = (
            "–û–ø–∏—à–∏ —Å—Ç–∏–ª—å –ø–∞—Ä—Ç–∏–∏ —Ç–µ–≥–∞–º–∏ (1-3, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é adventure)\n"
            "–ü–æ—è—Å–Ω–µ–Ω–∏–µ: —Ç–µ–≥–∏ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è.\n"
            "–ü—Ä–∏–º–µ—Ä—ã —Å–æ—á–µ—Ç–∞–Ω–∏–π: stealth, mystery, intrigue; combat, heroic, justice; exploration, social, discovery."
        )
        while True:
            raw = simpledialog.askstring("–¢–µ–≥–∏ –ø–∞—Ä—Ç–∏–∏", prompt, parent=self.root)
            if raw is None:
                return ["adventure"]
            raw = raw.strip()
            if not raw:
                return ["adventure"]
            tags = [item.strip() for item in re.split(r'[;,]+', raw) if item.strip()]
            if 1 <= len(tags) <= 3:
                return tags
            messagebox.showwarning("–¢–µ–≥–∏ –ø–∞—Ä—Ç–∏–∏", "–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –æ—Ç 1 –¥–æ 3 —Ç–µ–≥–æ–≤.")

    def _prompt_first_scene_description(self, scenario_label: str) -> str:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –≤–µ–¥—É—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ü–µ–Ω—ã."""

        while True:
            dialog = FirstSceneDialog(
                self.root,
                theme=self.theme,
                fonts=self.fonts,
                scenario_label=scenario_label,
                generate_callback=lambda: self._auto_generate_first_scene(scenario_label),
            )
            result = dialog.show()
            if result is None:
                messagebox.showwarning(
                    "–ü–µ—Ä–≤–∞—è —Å—Ü–µ–Ω–∞",
                    (
                        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π, –æ–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—É—é —Å—Ü–µ–Ω—É."
                        " –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä –∫–∞–∫ –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è."
                    ),
                )
                continue

            scene_text = result.strip()
            if not scene_text:
                messagebox.showwarning(
                    "–ü–µ—Ä–≤–∞—è —Å—Ü–µ–Ω–∞",
                    "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ö–æ—Ç—è –±—ã –ø–∞—Ä–æ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.",
                )
                continue

            if len(scene_text) < 40:
                confirm = messagebox.askyesno(
                    "–ü–µ—Ä–≤–∞—è —Å—Ü–µ–Ω–∞",
                    (
                        "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–º."
                        " –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–≥—Ä–æ–∫–∏ –ø–æ–π–º—É—Ç –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –∏ —Ü–µ–ª—å."
                        " –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å?"
                    ),
                )
                if not confirm:
                    continue

            return scene_text

    def _auto_generate_first_scene(self, scenario_label: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ü–µ–Ω—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ –º–æ–¥–µ–ª–∏ OpenAI."""

        party_data = self.party_state or {}
        party_block = party_data.get("party", {}) if isinstance(party_data, dict) else {}
        members = party_block.get("members", []) if isinstance(party_block, dict) else []
        member_lines: List[str] = []

        for member in members:
            if not isinstance(member, dict):
                continue
            name = member.get("name", "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –≥–µ—Ä–æ–π")
            role = member.get("role", "–±–µ–∑ —Ä–æ–ª–∏")
            concept = member.get("concept", "").strip()
            traits = ", ".join(member.get("traits", [])[:2]) if member.get("traits") else ""
            loadout = ", ".join(member.get("loadout", [])[:2]) if member.get("loadout") else ""
            summary_parts = [f"{name} ‚Äî {role}"]
            if concept:
                summary_parts.append(concept)
            if traits:
                summary_parts.append(f"—á–µ—Ä—Ç—ã: {traits}")
            if loadout:
                summary_parts.append(f"—Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ: {loadout}")
            member_lines.append("; ".join(summary_parts))

        party_tags = party_block.get("party_tags", []) if isinstance(party_block, dict) else []
        tags_text = ", ".join(party_tags) if party_tags else "adventure"
        resources = party_block.get("resources", {}) if isinstance(party_block, dict) else {}
        resources_parts = []
        for key in ("coin", "rations"):
            value = resources.get(key)
            if value is not None:
                resources_parts.append(f"{key}: {value}")
        resources_text = ", ".join(resources_parts) if resources_parts else "standard supplies"

        world_context = (self.world_bible or "").strip()
        if world_context:
            world_context = world_context[:1500]

        story_context = (self.story_arc or "").strip()
        if story_context:
            story_context = story_context[:1200]

        party_overview = "\n".join(f"- {line}" for line in member_lines) if member_lines else "- —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–µ–¥—É—â–∏–º"

        user_prompt = (
            "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —è—Ä–∫—É—é –ø–µ—Ä–≤—É—é —Å—Ü–µ–Ω—É –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–π D&D-–ø–∞—Ä—Ç–∏–∏.\n"
            f"–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è: {scenario_label}.\n"
            "–ò–≥—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏ –≥–µ—Ä–æ–µ–≤, –∏–º –Ω—É–∂–Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –º–µ—Å—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Ü–µ–ª—å.\n"
            f"–°–æ—Å—Ç–∞–≤ –ø–∞—Ä—Ç–∏–∏:\n{party_overview}\n"
            f"–¢–µ–≥–∏ –∫–æ–º–∞–Ω–¥—ã: {tags_text}. –†–µ—Å—É—Ä—Å—ã: {resources_text}.\n"
            "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 4-6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –∂–∏–≤–æ–º —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
            "–û–ø–∏—à–∏ –º–µ—Å—Ç–æ, –≥—Ä–æ–º–∫—É—é –¥–µ—Ç–∞–ª—å, NPC –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ, —É–≥—Ä–æ–∑—É –∏–ª–∏ –∑–∞–≥–∞–¥–∫—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∑–∞—Ü–µ–ø–∫—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è.\n"
        )

        if world_context:
            user_prompt += "\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∏—Ä–∞:\n" + world_context
        if story_context:
            user_prompt += "\n\n–§—Ä–∞–≥–º–µ–Ω—Ç –ø–ª–∞–Ω–∞ –∫–∞–º–ø–∞–Ω–∏–∏:\n" + story_context

        response = self.client.chat.completions.create(
            model=self.models["story"],
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –≤–µ–¥—É—â–∏–π Dungeons & Dragons."
                        " –°–æ–∑–¥–∞–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—É—é —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ü–µ–Ω—É –¥–ª—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è."
                        " –£—á–∏—Ç—ã–≤–∞–π —Å–æ—Å—Ç–∞–≤ –ø–∞—Ä—Ç–∏–∏ –∏ –∑–∞–¥–∞–π –ø–æ–Ω—è—Ç–Ω—ã–π –∫—Ä—é—á–æ–∫ –¥–ª—è —Å—é–∂–µ—Ç–∞."
                    ),
                },
                {"role": "user", "content": user_prompt},
            ],
            temperature=0.85,
            max_completion_tokens=420,
        )

        scene_text = response.choices[0].message.content.strip()
        if not scene_text:
            raise ValueError("–º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")

        return scene_text

    def _generate_member_id(
        self,
        name: str,
        existing_ids: Set[str],
        index: int,
    ) -> str:
        base = self._slugify_tag(name) or f"pc_{index}"
        candidate = f"pc_{base}" if not base.startswith("pc_") else base
        suffix = 1
        final_id = candidate
        while final_id in existing_ids:
            suffix += 1
            final_id = f"{candidate}_{suffix}"
        return final_id

    def _slugify_tag(self, text: str) -> str:
        translit_map = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'h', '—Ü': 'c', '—á': 'ch', '—à': 'sh', '—â': 'sch', '—ä': '',
            '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
        }
        result = []
        for char in text.lower():
            if char in translit_map:
                result.append(translit_map[char])
            elif char.isalnum() and char.isascii():
                result.append(char)
        slug = ''.join(result)
        slug = re.sub(r'[^a-z0-9]+', '', slug)
        return slug

    def _show_party_summary(self, json_text: str, compact_lines: List[str], scenario_label: str) -> None:
        colors = self.theme
        fonts = self.fonts

        window = tk.Toplevel(self.root)
        window.title("–°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        window.configure(bg=colors["bg_dark"])

        container = tk.Frame(
            window,
            bg=colors["bg_panel"],
            highlightbackground=colors["accent_muted"],
            highlightthickness=1,
            bd=0,
            padx=15,
            pady=15
        )
        container.pack(fill='both', expand=True, padx=20, pady=20)

        title = tk.Label(
            container,
            text=f"–ü–∞—Ä—Ç–∏—è –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è '{scenario_label}' —Å–æ–∑–¥–∞–Ω–∞",
            font=fonts["subtitle"],
            bg=colors["bg_panel"],
            fg=colors["accent_light"]
        )
        title.pack(pady=(0, 10))

        json_label = tk.Label(
            container,
            text="JSON —à–∞–±–ª–æ–Ω:",
            font=fonts["text"],
            bg=colors["bg_panel"],
            fg=colors["accent_light"]
        )
        json_label.pack(anchor='w')

        json_box = scrolledtext.ScrolledText(
            container,
            wrap=tk.WORD,
            width=80,
            height=12,
            font=fonts["text"],
            bg=colors["bg_card"],
            fg=colors["text_dark"],
            relief='flat',
            borderwidth=0,
            highlightthickness=0
        )
        json_box.pack(fill='both', expand=True, pady=(4, 12))
        json_box.insert(tk.END, json_text)
        json_box.config(state='disabled')

        compact_label = tk.Label(
            container,
            text="–ö—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫:",
            font=fonts["text"],
            bg=colors["bg_panel"],
            fg=colors["accent_light"]
        )
        compact_label.pack(anchor='w')

        compact_box = scrolledtext.ScrolledText(
            container,
            wrap=tk.WORD,
            width=80,
            height=6,
            font=fonts["text"],
            bg=colors["bg_card"],
            fg=colors["text_dark"],
            relief='flat',
            borderwidth=0,
            highlightthickness=0
        )
        compact_box.pack(fill='x', expand=False, pady=(4, 12))
        compact_box.insert(tk.END, "\n".join(compact_lines))
        compact_box.config(state='disabled')

        close_button = tk.Button(
            container,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            command=window.destroy,
            font=fonts["button"],
            bg=colors["button_primary"],
            fg=colors["button_text"],
            activebackground=colors["accent"],
            activeforeground=colors["text_dark"],
            relief='flat',
            bd=0,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
            padx=12,
            pady=6
        )
        close_button.pack(pady=(0, 5))

    def initialize_world_bible(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ë–∏–±–ª–∏–∏ –º–∏—Ä–∞"""
        bible_file = "world_bible.md"
        
        if os.path.exists(bible_file):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ë–∏–±–ª–∏—é –º–∏—Ä–∞
            try:
                with open(bible_file, 'r', encoding='utf-8') as f:
                    self.world_bible = f.read()
                print("üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ë–∏–±–ª–∏—è –º–∏—Ä–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ë–∏–±–ª–∏–∏ –º–∏—Ä–∞: {e}")
                self.generate_world_bible()
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ë–∏–±–ª–∏—é –º–∏—Ä–∞
            print("üåç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –ë–∏–±–ª–∏—è –º–∏—Ä–∞...")
            self.generate_world_bible()
    
    def generate_world_bible(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –ë–∏–±–ª–∏—é –º–∏—Ä–∞"""
        try:
            # –°–ª—É—á–∞–π–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞
            settings = [
                "–§—ç–Ω—Ç–µ–∑–∏ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å—Ç–∏–º–ø–∞–Ω–∫–∞",
                "–¢–µ–º–Ω–æ–µ —Ñ—ç–Ω—Ç–µ–∑–∏ —Å –≥–æ—Ç–∏—á–µ—Å–∫–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏", 
                "–ö–∏–±–µ—Ä–ø–∞–Ω–∫ —Å –º–∞–≥–∏–µ–π",
                "–ü–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Ç–∏—á–µ—Å–∫–æ–µ —Ñ—ç–Ω—Ç–µ–∑–∏",
                "–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤–æ–µ —Ñ—ç–Ω—Ç–µ–∑–∏ —Å –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Ç—Ä–∏–≥–∞–º–∏",
                "–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Ä–µ–∞–ª–∏–∑–º –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ",
                "–°–∫–∞–∑–æ—á–Ω–æ–µ —Ñ—ç–Ω—Ç–µ–∑–∏ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ö–æ—Ä—Ä–æ—Ä–∞"
            ]
            
            tones = [
                "–º—Ä–∞—á–Ω—ã–π –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π",
                "–≥–µ—Ä–æ–∏—á–µ—Å–∫–∏–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π", 
                "–∑–∞–≥–∞–¥–æ—á–Ω—ã–π –∏ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π",
                "—ç–ø–∏—á–µ—Å–∫–∏–π –∏ –¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π",
                "–∏–Ω—Ç—Ä–∏–≥—É—é—â–∏–π –∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π",
                "—Ç–µ–º–Ω—ã–π –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–π",
                "—Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–∏–π"
            ]
            
            genres = [
                "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ö–æ—Ä—Ä–æ—Ä–∞",
                "–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç—Ä–∏–≥–∏ —Å –º–∞–≥–∏–µ–π",
                "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥—Ä–µ–≤–Ω–∏—Ö —Ä—É–∏–Ω",
                "–≤–æ–π–Ω–∞ –º–µ–∂–¥—É —Ñ—Ä–∞–∫—Ü–∏—è–º–∏",
                "–º–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
                "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏",
                "–≤—ã–∂–∏–≤–∞–Ω–∏–µ –≤ –æ–ø–∞—Å–Ω—ã—Ö –∑–µ–º–ª—è—Ö"
            ]
            
            selected_setting = random.choice(settings)
            selected_tone = random.choice(tones)
            selected_genre = random.choice(genres)
            
            world_prompt = f"""–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é –ë–∏–±–ª–∏—é –º–∏—Ä–∞ –¥–ª—è D&D –∫–∞–º–ø–∞–Ω–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

# –ë–ò–ë–õ–ò–Ø –ú–ò–†–ê

## –°–ï–¢–¢–ò–ù–ì
{selected_setting}

## –¢–û–ù –ò –°–¢–ò–õ–¨
–¢–æ–Ω –∫–∞–º–ø–∞–Ω–∏–∏: {selected_tone}
–ñ–∞–Ω—Ä–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞: {selected_genre}

## –í–ï–õ–ò–ö–ò–ï –¢–ê–ë–£ (—á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å –≤ —ç—Ç–æ–º –º–∏—Ä–µ)
- [3-4 —Ç–∞–±—É, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –º–∞–≥–∏–µ–π, —Ä–µ–ª–∏–≥–∏–µ–π –∏–ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –Ω–æ—Ä–º–∞–º–∏]

## –°–¢–ê–†–¢–û–í–ê–Ø –õ–û–ö–ê–¶–ò–Ø
- –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ
- –ö–ª—é—á–µ–≤—ã–µ NPC –∏ –∏—Ö —Ä–æ–ª–∏
- –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏

## –ö–õ–Æ–ß–ï–í–´–ï –§–†–ê–ö–¶–ò–ò
- [4-5 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—Ä–∞–∫—Ü–∏–π —Å –∏—Ö —Ü–µ–ª—è–º–∏, –º–µ—Ç–æ–¥–∞–º–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏]

## –ú–ò–†–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –Ω–∞—Ä—É—à–∞–π —ç—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞!)
1. [–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω –º–∏—Ä–∞]
2. [–ú–∞–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ]
3. [–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞]
4. [–ü—Ä–∏—Ä–æ–¥–Ω—ã–π –∑–∞–∫–æ–Ω]
5. [–†–µ–ª–∏–≥–∏–æ–∑–Ω–∞—è –¥–æ–≥–º–∞]
6. [–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –∏—Å—Ç–∏–Ω–∞]
7. [–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–Ω—Ü–∏–ø]

–°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –º–∏—Ä —Å —á–µ—Ç–∫–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π. –í—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–æ–≥–∏—á–Ω–æ —Å–≤—è–∑–∞–Ω–æ –º–µ–∂–¥—É —Å–æ–±–æ–π."""

            response = self.client.chat.completions.create(
                model=self.models["world"],
                messages=[{"role": "user", "content": world_prompt}],
                max_completion_tokens=2000,
                temperature=0.9
            )
            
            self.world_bible = response.choices[0].message.content
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ë–∏–±–ª–∏—é –º–∏—Ä–∞ –≤ —Ñ–∞–π–ª
            with open("world_bible.md", 'w', encoding='utf-8') as f:
                f.write(self.world_bible)
            
            print("‚úÖ –ë–∏–±–ª–∏—è –º–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ë–∏–±–ª–∏–∏ –º–∏—Ä–∞: {e}")
            self.world_bible = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–∏–±–ª–∏–∏ –º–∏—Ä–∞"

    def initialize_story_arc(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—é–∂–µ—Ç: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."""
        has_previous_story = os.path.exists(self.story_file)

        if has_previous_story:
            continue_previous = messagebox.askyesno(
                "–†–µ–∂–∏–º –∏–≥—Ä—ã",
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—à–ª—É—é —Å–µ—Å—Å–∏—é –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è?\n" \
                "(–î–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ù–µ—Ç ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é)"
            )

            if continue_previous:
                self.session_mode = "continue"
                loaded = self.load_story_arc()
                if loaded and self.story_arc and not self.story_arc.startswith("–û—à–∏–±–∫–∞"):
                    self.story_status_message = "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—à–ª–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ '–°—é–∂–µ—Ç', —á—Ç–æ–±—ã –æ—Å–≤–µ–∂–∏—Ç—å –ø–ª–∞–Ω."
                else:
                    self.session_mode = "new"
                    if self.story_arc and not self.story_arc.startswith("–û—à–∏–±–∫–∞"):
                        self.story_status_message = "–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—é–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å '–°—é–∂–µ—Ç–æ–º'."
                    else:
                        detail = f" –ü—Ä–∏—á–∏–Ω–∞: {self.last_error_message}" if self.last_error_message else ""
                        self.story_status_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—à–ª—ã–π —Å—é–∂–µ—Ç –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–°—é–∂–µ—Ç'." + detail
                return

        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π —Å—Ç–∞—Ä—Ç
        self.session_mode = "new"
        created = self.generate_story_arc()
        if created and self.story_arc and not self.story_arc.startswith("–û—à–∏–±–∫–∞"):
            self.story_status_message = "–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ! –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–∞–∑–¥–µ–ª–æ–º '–°—é–∂–µ—Ç', —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏."
        else:
            detail = f" –ü—Ä–∏—á–∏–Ω–∞: {self.last_error_message}" if self.last_error_message else ""
            self.story_status_message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—é–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é '–°—é–∂–µ—Ç'." + detail

    def load_story_arc(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—é–∂–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.story_file, 'r', encoding='utf-8') as f:
                self.story_arc = f.read().strip()
            if not self.story_arc:
                raise ValueError("–ü—É—Å—Ç–æ–π —Å—é–∂–µ—Ç")
            print("üó∫Ô∏è –°—é–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω")
            self.last_error_message = ""
            self.update_system_prompt()
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—é–∂–µ—Ç–∞: {e}")
            self.last_error_message = str(e)
            self.story_arc = None
            created = self.generate_story_arc()
            return created

    def generate_story_arc(self) -> bool:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Å—é–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
        try:
            world_context = self.world_bible if self.world_bible else "–ú–∏—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            rules_context = "\n" + yaml.dump(self.game_rules, allow_unicode=True, sort_keys=False) if self.game_rules else ""

            story_prompt = f"""–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–π —Å—é–∂–µ—Ç –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ D&D:

–ú–∏—Ä:
{world_context}

–ü—Ä–∞–≤–∏–ª–∞ –∏–ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏:
{rules_context}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—é–∂–µ—Ç—É:
- –î–∞–π —è—Ä–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –∫—Ä–∞—Ç–∫–∏–π —Å–∏–Ω–æ–ø—Å–∏—Å (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
- –†–∞—Å–ø–∏—à–∏ —Å—é–∂–µ—Ç –º–∏–Ω–∏–º—É–º –Ω–∞ 3 –∞–∫—Ç–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏, –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏ –∏ –æ–∂–∏–¥–∞–µ–º—ã–º –∏—Å—Ö–æ–¥–æ–º –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∞.
- –î–æ–±–∞–≤—å 3-4 –∫–ª—é—á–µ–≤—ã—Ö NPC –∏–ª–∏ —Ñ—Ä–∞–∫—Ü–∏–∏, —á—å–∏ —Ü–µ–ª–∏ –¥–≤–∏–≥–∞—é—Ç —Å—é–∂–µ—Ç –≤–ø–µ—Ä–µ–¥.
- –û–±–æ–∑–Ω–∞—á—å 3 —Å—é–∂–µ—Ç–Ω—ã—Ö –∫—Ä—é—á–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ –∏ 3 –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–∑–≤–∏–ª–∫–∏/–≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–∞–∑–≤–∏—Ç–∏—è.
- –£–∫–∞–∂–∏ —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–ª—å –∫–∞–º–ø–∞–Ω–∏–∏ –∏ —É—Å–ª–æ–≤–∏—è –µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.
- –ü–∏—à–∏ –∫–æ–º–ø–∞–∫—Ç–Ω–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏.
- –ü–æ–º–Ω–∏, —á—Ç–æ –º–∞—Å—Ç–µ—Ä –æ–±—è–∑–∞–Ω –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∫ –∫—É–ª—å–º–∏–Ω–∞—Ü–∏—è–º, —Å–æ—Ö—Ä–∞–Ω—è—è –∏–Ω—Ç—Ä–∏–≥—É –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.
"""

            response = self.client.chat.completions.create(
                model=self.models["story"],
                messages=[{"role": "user", "content": story_prompt}],
                max_completion_tokens=1500,
                temperature=0.85
            )

            self.story_arc = response.choices[0].message.content.strip()

            with open(self.story_file, 'w', encoding='utf-8') as f:
                f.write(self.story_arc)

            print("‚úÖ –°—é–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

            self.last_error_message = ""
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—é–∂–µ—Ç–∞: {e}")
            self.last_error_message = str(e)
            self.story_arc = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—é–∂–µ—Ç–∞"
            return False

        finally:
            # –ü–æ—Å–ª–µ –ª—é–±–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—é–∂–µ—Ç–∞ –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            self.update_system_prompt()

    def update_system_prompt(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç(OpenAI) —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –º–∏—Ä–∞ –∏ —Å—é–∂–µ—Ç–∞"""
        world_context = self.world_bible if self.world_bible else "–ë–∏–±–ª–∏—è –º–∏—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
        story_arc_context = self.story_arc if self.story_arc else "–°—é–∂–µ—Ç —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"

        self.system_prompt = f"""–¢—ã –æ–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä D&D. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≤–µ—Å—Ç–∏ –∏–≥—Ä—É, —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –ø–æ–º–æ–≥–∞—Ç—å –∏–≥—Ä–æ–∫–∞–º.
        –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ä–æ–ª–∏ –º–∞—Å—Ç–µ—Ä–∞ –∏–≥—Ä—ã. –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º, –Ω–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–º.
        –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —Ä–µ–∞–≥–∏—Ä—É–π –∫–∞–∫ –º–∞—Å—Ç–µ—Ä –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.
        –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –∏–ª–∏ –º–∏—Ä–µ, –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ –∑–Ω–∞—é—â–∏–π –º–∞—Å—Ç–µ—Ä.
        –¢—ã –æ–±—è–∑–∞–Ω —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—é–∂–µ—Ç—É —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∏ –º—è–≥–∫–æ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∫ –µ–≥–æ –∫–ª—é—á–µ–≤—ã–º —Å–æ–±—ã—Ç–∏—è–º, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–≤–æ–±–æ–¥—É –≤—ã–±–æ—Ä–∞.

        –ü–†–ê–í–ò–õ–ê –ò–ì–†–´:
        - –í—Å–µ–≥–¥–∞ –±—Ä–æ—Å–∞–π –∫–æ—Å—Ç–∏ –∑–∞ –∫–∞–¥—Ä–æ–º –∏ —Å–æ–æ–±—â–∞–π –≥–æ—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        - –ò—Å–ø–æ–ª—å–∑—É–π —à–∫–∞–ª—É —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π: –¢—Ä–∏–≤–∏–∞–ª—å–Ω–∞—è(5), –õ–µ–≥–∫–∞—è(10), –°—Ä–µ–¥–Ω—è—è(15), –°–ª–æ–∂–Ω–∞—è(20), –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–∞—è(25), –ü–æ—á—Ç–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞—è(30)
        - –î–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–π d20 + –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        - –î–ª—è –∞—Ç–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–π d20 + –±–æ–Ω—É—Å –∞—Ç–∞–∫–∏ –ø—Ä–æ—Ç–∏–≤ –ö–ª–∞—Å—Å–∞ –ë—Ä–æ–Ω–∏ (AC)
        - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä –Ω–∞ 20, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–∞—Ö –Ω–∞ 1
        - –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤: 50-200 —Å–ª–æ–≤, –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ 100 —Å–ª–æ–≤

        –í–ê–ñ–ù–û: –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π –ø—Ä–∞–≤–∏–ª–∞–º –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º –º–∏—Ä–∞ –∏–∑ –ë–∏–±–ª–∏–∏ –º–∏—Ä–∞:
        {world_context}

        –¢–ï–ö–£–©–ò–ô –°–Æ–ñ–ï–¢ –ö–ê–ú–ü–ê–ù–ò–ò (—Å–ª–µ–¥—É–π –µ–º—É –±–µ–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π, –Ω–∞–ø—Ä–∞–≤–ª—è–π –∏–≥—Ä–æ–∫–æ–≤ –∫ –∫—É–ª—å–º–∏–Ω–∞—Ü–∏—è–º –∏ —Ñ–∏–Ω–∞–ª—É):
        {story_arc_context}

        –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –Ω–∞—Ä—É—à–∞–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –º–∏—Ä–∞ –∏ —Å–ª–µ–¥—É–π –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ç–æ–Ω—É –∏ —Å—Ç–∏–ª—é."""

    def detect_and_roll_dice(self, user_input: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω—ã –ª–∏ –±—Ä–æ—Å–∫–∏ –∫–æ—Å—Ç–µ–π –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Ö"""
        dice_results = []
        
        # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—Ä–æ—Å–∫–æ–≤
        auto_roll_keywords = {
            '–∞—Ç–∞–∫–∞': ('d20', 0),  # –ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞
            '—É—Ä–æ–Ω': ('d8', 0),    # –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω –º–µ—á–∞
            '–ø—Ä–æ–≤–µ—Ä–∫–∞': ('d20', 0),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            '—Å–ø–∞—Å–±—Ä–æ—Å–æ–∫': ('d20', 0),  # –°–ø–∞—Å–±—Ä–æ—Å–æ–∫
            '–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞': ('d20', 0),  # –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞
            '—Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å': ('d20', 0),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏
            '–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ': ('d20', 0),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
            '–º–∞–≥–∏—è': ('d20', 0),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–≥–∏–∏
            '—É–±–µ–∂–¥–µ–Ω–∏–µ': ('d20', 0),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–±–µ–∂–¥–µ–Ω–∏—è
            '–∑–∞–ø—É–≥–∏–≤–∞–Ω–∏–µ': ('d20', 0),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É–≥–∏–≤–∞–Ω–∏—è
            '–∞—Ç–ª–µ—Ç–∏–∫–∞': ('d20', 0),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç–ª–µ—Ç–∏–∫–∏
            '–∞–∫—Ä–æ–±–∞—Ç–∏–∫–∞': ('d20', 0),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ä–æ–±–∞—Ç–∏–∫–∏
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –±—Ä–æ—Å–∫–æ–≤
        for keyword, (dice_type, modifier) in auto_roll_keywords.items():
            if keyword in user_input.lower():
                result = dice_roller.roll_dice(f"{dice_type}+{modifier}")
                dice_results.append(dice_roller.format_roll_result(result))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±—Ä–æ—Å–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä "–±—Ä–æ—Å–∞—é d20", "–∫–∏–¥–∞—é –∫–æ—Å—Ç–∏")
        dice_patterns = [
            r'–±—Ä–æ—Å–∞—é?\s+(d\d+)',
            r'–∫–∏–¥–∞—é?\s+(d\d+)',
            r'–±—Ä–æ—Å–æ–∫\s+(d\d+)',
            r'(\d*d\d+\+?\d*)',
        ]
        
        for pattern in dice_patterns:
            matches = re.findall(pattern, user_input.lower())
            for match in matches:
                if isinstance(match, tuple):
                    match = match[0]
                result = dice_roller.roll_dice(match)
                dice_results.append(dice_roller.format_roll_result(result))
        
        return dice_results
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        colors = self.theme
        fonts = self.fonts

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(
            self.root,
            bg=colors["bg_dark"],
            pady=10
        )
        title_frame.pack(fill='x', padx=20, pady=(10, 0))

        title_label = tk.Label(
            title_frame,
            text="üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ D&D —Å AI –º–∞—Å—Ç–µ—Ä–æ–º! üé≤",
            font=fonts["title"],
            bg=colors["bg_dark"],
            fg=colors["accent_light"]
        )
        title_label.pack()

        subtitle_label = tk.Label(
            title_frame,
            text="–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é: –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è, –∞ –º–∞—Å—Ç–µ—Ä –ø–æ–≤–µ–¥–∞–µ—Ç, —á—Ç–æ —Å–∫—Ä—ã–≤–∞—é—Ç —Ç–µ–Ω–∏ –º–∏—Ä–∞.",
            font=fonts["text"],
            bg=colors["bg_dark"],
            fg=colors["text_muted"]
        )
        subtitle_label.pack()

        # –û–±–ª–∞—Å—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        chat_frame = tk.Frame(
            self.root,
            bg=colors["bg_panel"],
            highlightbackground=colors["accent_muted"],
            highlightthickness=1,
            bd=0,
            padx=10,
            pady=10
        )
        chat_frame.pack(fill='both', expand=True, padx=20, pady=15)

        chat_label = tk.Label(
            chat_frame,
            text="–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è:",
            font=fonts["subtitle"],
            bg=colors["bg_panel"],
            fg=colors["accent_light"]
        )
        chat_label.pack(anchor='w', padx=5, pady=(0, 4))

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        self.chat_display = scrolledtext.ScrolledText(
            chat_frame,
            wrap=tk.WORD,
            width=70,
            height=20,
            font=fonts["text"],
            bg=colors["bg_card"],
            fg=colors["text_dark"],
            state='disabled',
            relief='flat',
            borderwidth=0,
            highlightthickness=0,
            insertbackground=colors["text_dark"],
            selectbackground=colors["accent"],
            selectforeground=colors["text_dark"],
            padx=10,
            pady=10
        )
        try:
            self.chat_display.config(disabledbackground=colors["bg_card"], disabledforeground=colors["text_dark"])
        except tk.TclError:
            pass
        self.chat_display.pack(fill='both', expand=True, padx=5, pady=5)
        self.chat_display.tag_configure("speaker_master", foreground=colors["accent"], font=fonts["button"])
        self.chat_display.tag_configure("speaker_player", foreground=colors["button_primary"], font=fonts["button"])
        self.chat_display.tag_configure("speaker_dice", foreground=colors["dice_highlight"], font=fonts["button"])
        self.chat_display.tag_configure("speaker_other", foreground=colors["text_dark"], font=fonts["button"])
        self.chat_display.tag_configure("message_body", foreground=colors["text_dark"], font=fonts["text"])

        # –û–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞
        input_frame = tk.Frame(
            self.root,
            bg=colors["bg_panel"],
            highlightbackground=colors["accent_muted"],
            highlightthickness=1,
            bd=0,
            padx=10,
            pady=10
        )
        input_frame.pack(fill='x', padx=20, pady=(0, 20))

        input_label = tk.Label(
            input_frame,
            text="–í–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            font=fonts["subtitle"],
            bg=colors["bg_panel"],
            fg=colors["accent_light"]
        )
        input_label.pack(anchor='w', padx=5, pady=(0, 6))

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(
            input_frame,
            bg=colors["bg_panel"]
        )
        button_frame.pack(fill='x', padx=5, pady=5)

        self.challenge_result_var = tk.StringVar(value="")

        self.input_text = tk.Text(
            button_frame,
            height=3,
            wrap=tk.WORD,
            font=fonts["text"],
            bg=colors["bg_input"],
            fg=colors["text_dark"],
            insertbackground=colors["text_dark"],
            relief='flat',
            borderwidth=0,
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
            highlightcolor=colors["accent"],
            padx=8,
            pady=6
        )
        self.input_text.pack(side='left', fill='both', expand=True, padx=(0, 5))

        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = tk.Frame(button_frame, bg=colors["bg_panel"])
        buttons_frame.pack(side='right', fill='y')

        self.send_button = tk.Button(
            buttons_frame,
            text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
            command=self.send_message,
            font=fonts["button"],
            bg=colors["button_primary"],
            fg=colors["button_text"],
            activebackground=colors["accent"],
            activeforeground=colors["text_dark"],
            relief='flat',
            bd=0,
            width=12,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"]
        )
        self.send_button.pack(pady=2)

        self.world_button = tk.Button(
            buttons_frame,
            text="–ú–∏—Ä",
            command=self.show_world_bible,
            font=fonts["button"],
            bg=colors["button_secondary"],
            fg=colors["button_text"],
            activebackground=colors["accent"],
            activeforeground=colors["text_dark"],
            relief='flat',
            bd=0,
            width=12,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"]
        )
        self.world_button.pack(pady=2)

        self.story_button = tk.Button(
            buttons_frame,
            text="–°—é–∂–µ—Ç",
            command=self.show_story_arc,
            font=fonts["button"],
            bg=colors["accent_light"],
            fg=colors["text_dark"],
            activebackground=colors["accent"],
            activeforeground=colors["text_dark"],
            relief='flat',
            bd=0,
            width=12,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"]
        )
        self.story_button.pack(pady=2)

        self.dice_button = tk.Button(
            buttons_frame,
            text="–ö–æ—Å—Ç–∏",
            command=self.show_dice_roller,
            font=fonts["button"],
            bg=colors["accent"],
            fg=colors["text_dark"],
            activebackground=colors["accent_light"],
            activeforeground=colors["text_dark"],
            relief='flat',
            bd=0,
            width=12,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"]
        )
        self.dice_button.pack(pady=2)

        self.challenge_button = tk.Button(
            buttons_frame,
            text="–ü—Ä–æ–≤–µ—Ä–∫–∞",
            command=self.show_dice_challenge_dialog,
            font=fonts["button"],
            bg=colors["accent"],
            fg=colors["text_dark"],
            activebackground=colors["accent_light"],
            activeforeground=colors["text_dark"],
            relief='flat',
            bd=0,
            width=12,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"]
        )
        self.challenge_button.pack(pady=2)

        self.exit_button = tk.Button(
            buttons_frame,
            text="–í—ã—Ö–æ–¥",
            command=self.exit_app,
            font=fonts["button"],
            bg=colors["button_danger"],
            fg=colors["button_text"],
            activebackground="#a42822",
            activeforeground=colors["button_text"],
            relief='flat',
            bd=0,
            width=12,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"]
        )
        self.exit_button.pack(pady=2)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.input_text.bind('<Control-Return>', lambda e: self.send_message())

        self.challenge_frame = tk.Frame(
            input_frame,
            bg=colors["bg_panel"],
            highlightbackground=colors["accent_muted"],
            highlightthickness=1,
            bd=0,
            padx=12,
            pady=12,
        )
        self.challenge_frame.pack(fill='x', padx=5, pady=(8, 0))

        header = tk.Label(
            self.challenge_frame,
            text="–ê–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:",
            font=fonts["subtitle"],
            bg=colors["bg_panel"],
            fg=colors["accent_light"],
            anchor='w',
        )
        header.pack(anchor='w')

        self.challenge_desc_label = tk.Label(
            self.challenge_frame,
            textvariable=self.challenge_desc_var,
            font=fonts["text"],
            bg=colors["bg_panel"],
            fg=colors["text_light"],
            justify='left',
            wraplength=640,
        )
        self.challenge_desc_label.pack(anchor='w', pady=(4, 2))

        self.challenge_target_label = tk.Label(
            self.challenge_frame,
            textvariable=self.challenge_target_var,
            font=fonts["text"],
            bg=colors["bg_panel"],
            fg=colors["accent_light"],
            justify='left',
            wraplength=640,
        )
        self.challenge_target_label.pack(anchor='w', pady=(0, 4))

        self.challenge_hint_label = tk.Label(
            self.challenge_frame,
            textvariable=self.challenge_hint_var,
            font=fonts["text"],
            bg=colors["bg_panel"],
            fg=colors["text_muted"],
            justify='left',
            wraplength=640,
        )
        self.challenge_hint_label.pack(anchor='w', pady=(0, 6))

        entry_wrapper = tk.Frame(self.challenge_frame, bg=colors["bg_panel"])
        entry_wrapper.pack(fill='x', pady=(4, 4))

        entry_label = tk.Label(
            entry_wrapper,
            text="–í–≤–µ–¥–∏ –∏—Ç–æ–≥ –±—Ä–æ—Å–∫–∞ (—Å —É—á—ë—Ç–æ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤):",
            font=fonts["text"],
            bg=colors["bg_panel"],
            fg=colors["accent_light"],
        )
        entry_label.pack(anchor='w')

        self.challenge_result_entry = tk.Entry(
            entry_wrapper,
            textvariable=self.challenge_result_var,
            font=fonts["text"],
            bg=colors["bg_input"],
            fg=colors["text_dark"],
            insertbackground=colors["text_dark"],
            relief='flat',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
            highlightcolor=colors["accent"],
        )
        self.challenge_result_entry.pack(fill='x', pady=(4, 0))

        buttons_row = tk.Frame(self.challenge_frame, bg=colors["bg_panel"])
        buttons_row.pack(fill='x', pady=(8, 0))

        self.challenge_submit_button = tk.Button(
            buttons_row,
            text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            command=self._submit_challenge_result,
            font=fonts["button"],
            bg=colors["button_primary"],
            fg=colors["button_text"],
            activebackground=colors["accent"],
            activeforeground=colors["text_dark"],
            relief='flat',
            bd=0,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
        )
        self.challenge_submit_button.pack(side='left')

        self.challenge_cancel_button = tk.Button(
            buttons_row,
            text="–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É",
            command=self._cancel_active_challenge,
            font=fonts["button"],
            bg=colors["button_secondary"],
            fg=colors["button_text"],
            activebackground=colors["accent"],
            activeforeground=colors["text_dark"],
            relief='flat',
            bd=0,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
        )
        self.challenge_cancel_button.pack(side='right')

        self.challenge_frame.pack_forget()

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_message = (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä D&D! –Ø –≤–∞—à –º–∞—Å—Ç–µ—Ä –∏–≥—Ä—ã. –ú–∏—Ä —É–∂–µ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º. "
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–∏—Ä', —á—Ç–æ–±—ã –∏–∑—É—á–∏—Ç—å –ë–∏–±–ª–∏—é –º–∏—Ä–∞, –∏ '–°—é–∂–µ—Ç' ‚Äî —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–ª–∞–Ω –∫–∞–º–ø–∞–Ω–∏–∏. "
        )
        if self.story_status_message:
            welcome_message += self.story_status_message
        self.add_to_chat("üé≠ –ú–∞—Å—Ç–µ—Ä", welcome_message)
        
    def add_to_chat(self, sender, message):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"""
        if "–ú–∞—Å—Ç–µ—Ä" in sender:
            speaker_tag = "speaker_master"
        elif "–ò–≥—Ä–æ–∫" in sender:
            speaker_tag = "speaker_player"
        elif "–ë—Ä–æ—Å–æ–∫" in sender:
            speaker_tag = "speaker_dice"
        else:
            speaker_tag = "speaker_other"

        self.chat_display.config(state='normal')
        self.chat_display.insert(tk.END, f"{sender}: ", speaker_tag)
        self.chat_display.insert(tk.END, f"{message}\n\n", "message_body")
        self.chat_display.config(state='disabled')
        self.chat_display.see(tk.END)
        
    def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É"""
        user_input = self.input_text.get("1.0", tk.END).strip()
        
        if not user_input:
            return
            
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.input_text.delete("1.0", tk.END)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ —á–∞—Ç
        self.add_to_chat("üë§ –ò–≥—Ä–æ–∫", user_input)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–æ—Å–∫–∏ –∫–æ—Å—Ç–µ–π
        dice_results = self.detect_and_roll_dice(user_input)
        if dice_results:
            for result in dice_results:
                self.add_to_chat("üé≤ –ë—Ä–æ—Å–æ–∫", result)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.send_button.config(state='disabled', text="–î—É–º–∞–µ—Ç...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self.process_message, args=(user_input,))
        thread.daemon = True
        thread.start()
        
    def process_message(self, user_input):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            master_response = self.get_master_response(user_input)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.root.after(0, self.display_master_response, master_response)
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {str(e)}"
            self.root.after(0, self.display_master_response, error_msg)
            
    def display_master_response(self, response):
        """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ—Ç–≤–µ—Ç –º–∞—Å—Ç–µ—Ä–∞"""
        self.add_to_chat("üé≠ –ú–∞—Å—Ç–µ—Ä", response)
        
        # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
        self.send_button.config(state='normal', text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        
    def get_master_response(self, user_input):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–∞—Å—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ OpenAI API"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({"role": "user", "content": user_input})
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
            messages = [{"role": "system", "content": self.system_prompt}]
            messages.extend(self.conversation_history[-10:])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            response = self.client.chat.completions.create(
                model=self.models["master"],
                messages=messages,
                max_completion_tokens=500,
                temperature=0.8
            )
            
            master_response = response.choices[0].message.content
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–∞—Å—Ç–µ—Ä–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({"role": "assistant", "content": master_response})
            
            return master_response
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {str(e)}"
    
    def show_world_bible(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ë–∏–±–ª–∏—é –º–∏—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ"""
        if not self.world_bible:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ë–∏–±–ª–∏—è –º–∏—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return
            
        colors = self.theme
        fonts = self.fonts

        bible_window = tk.Toplevel(self.root)
        bible_window.title("üìñ –ë–∏–±–ª–∏—è –º–∏—Ä–∞")
        bible_window.geometry("900x700")
        bible_window.minsize(700, 500)
        bible_window.configure(bg=colors["bg_dark"])

        container = tk.Frame(
            bible_window,
            bg=colors["bg_panel"],
            highlightbackground=colors["accent_muted"],
            highlightthickness=1,
            bd=0,
            padx=15,
            pady=15
        )
        container.pack(fill='both', expand=True, padx=20, pady=20)

        title_label = tk.Label(
            container,
            text="üìñ –ë–∏–±–ª–∏—è –º–∏—Ä–∞",
            font=fonts["title"],
            bg=colors["bg_panel"],
            fg=colors["accent_light"]
        )
        title_label.pack(pady=(0, 12))

        bible_text = scrolledtext.ScrolledText(
            container,
            wrap=tk.WORD,
            width=100,
            height=35,
            font=fonts["text"],
            bg=colors["bg_card"],
            fg=colors["text_dark"],
            state='disabled',
            relief='flat',
            borderwidth=0,
            highlightthickness=0,
            insertbackground=colors["text_dark"],
            selectbackground=colors["accent"],
            selectforeground=colors["text_dark"],
            padx=12,
            pady=12
        )
        try:
            bible_text.config(disabledbackground=colors["bg_card"], disabledforeground=colors["text_dark"])
        except tk.TclError:
            pass
        bible_text.pack(fill='both', expand=True, padx=5, pady=5)

        bible_text.config(state='normal')
        bible_text.insert(tk.END, self.world_bible)
        bible_text.config(state='disabled')

        close_button = tk.Button(
            container,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            command=bible_window.destroy,
            font=fonts["button"],
            bg=colors["button_danger"],
            fg=colors["button_text"],
            activebackground="#a42822",
            activeforeground=colors["button_text"],
            relief='flat',
            bd=0,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
            padx=14,
            pady=6
        )
        close_button.pack(pady=10)

    def show_story_arc(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—é–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ"""
        colors = self.theme
        fonts = self.fonts

        story_window = tk.Toplevel(self.root)
        story_window.title("üó∫Ô∏è –°—é–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏")
        story_window.geometry("800x600")
        story_window.minsize(600, 450)
        story_window.configure(bg=colors["bg_dark"])

        container = tk.Frame(
            story_window,
            bg=colors["bg_panel"],
            highlightbackground=colors["accent_muted"],
            highlightthickness=1,
            bd=0,
            padx=15,
            pady=15
        )
        container.pack(fill='both', expand=True, padx=20, pady=20)

        title_label = tk.Label(
            container,
            text="üó∫Ô∏è –ü–ª–∞–Ω –∫–∞–º–ø–∞–Ω–∏–∏",
            font=fonts["title"],
            bg=colors["bg_panel"],
            fg=colors["accent_light"]
        )
        title_label.pack(pady=(0, 12))

        story_text = scrolledtext.ScrolledText(
            container,
            wrap=tk.WORD,
            width=90,
            height=30,
            font=fonts["text"],
            bg=colors["bg_card"],
            fg=colors["text_dark"],
            state='normal',
            relief='flat',
            borderwidth=0,
            highlightthickness=0,
            insertbackground=colors["text_dark"],
            selectbackground=colors["accent"],
            selectforeground=colors["text_dark"],
            padx=12,
            pady=12
        )
        story_text.pack(fill='both', expand=True, padx=5, pady=5)

        if self.story_arc and not self.story_arc.startswith("–û—à–∏–±–∫–∞"):
            story_content = self.story_arc
            story_state = 'disabled'
        else:
            story_content = "–°—é–∂–µ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π."
            story_state = 'normal'

        story_text.insert(tk.END, story_content)
        story_text.config(state=story_state)
        try:
            story_text.config(disabledbackground=colors["bg_card"], disabledforeground=colors["text_dark"])
        except tk.TclError:
            pass

        buttons_bar = tk.Frame(container, bg=colors["bg_panel"])
        buttons_bar.pack(fill='x', pady=(12, 0))

        def regenerate_story():
            if not messagebox.askyesno(
                "–ù–æ–≤—ã–π —Å—é–∂–µ—Ç",
                "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å—é–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏? –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω."
            ):
                return

            created = self.generate_story_arc()
            if created and self.story_arc and not self.story_arc.startswith("–û—à–∏–±–∫–∞"):
                story_text.config(state='normal')
                story_text.delete("1.0", tk.END)
                story_text.insert(tk.END, self.story_arc)
                story_text.config(state='disabled')
                messagebox.showinfo("–°—é–∂–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω", "–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å—é–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏. –í–µ–¥—É—â–∏–π –±—É–¥–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –µ–º—É.")
                self.session_mode = "new"
                self.story_status_message = "–°—é–∂–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–∞–∑–¥–µ–ª–æ–º '–°—é–∂–µ—Ç', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏."
                self.add_to_chat("üé≠ –ú–∞—Å—Ç–µ—Ä", "–°—é–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ–±–Ω–æ–≤–∏–ª—Å—è. –°–ª–µ–¥—É–µ–º –Ω–æ–≤–æ–º—É –ø–ª–∞–Ω—É –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è!")
            else:
                story_text.config(state='normal')
                story_text.delete("1.0", tk.END)
                failure_text = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—é–∂–µ—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
                if self.last_error_message:
                    failure_text += f"\n\n–ü—Ä–∏—á–∏–Ω–∞: {self.last_error_message}"
                story_text.insert(tk.END, failure_text)
                story_text.config(state='disabled')
                message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—é–∂–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                if self.last_error_message:
                    message += f"\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {self.last_error_message}"
                messagebox.showerror("–û—à–∏–±–∫–∞", message)
                self.story_status_message = "–°—é–∂–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–°—é–∂–µ—Ç'."
                self.add_to_chat("üé≠ –ú–∞—Å—Ç–µ—Ä", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—é–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")

        regenerate_button = tk.Button(
            buttons_bar,
            text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å—é–∂–µ—Ç",
            command=regenerate_story,
            font=fonts["button"],
            bg=colors["button_primary"],
            fg=colors["button_text"],
            activebackground=colors["accent"],
            activeforeground=colors["text_dark"],
            relief='flat',
            bd=0,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
            padx=12,
            pady=6
        )
        regenerate_button.pack(side='left')

        close_button = tk.Button(
            buttons_bar,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            command=story_window.destroy,
            font=fonts["button"],
            bg=colors["button_danger"],
            fg=colors["button_text"],
            activebackground="#a42822",
            activeforeground=colors["button_text"],
            relief='flat',
            bd=0,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
            padx=12,
            pady=6
        )
        close_button.pack(side='right')

    def show_dice_roller(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–µ–π"""
        colors = self.theme
        fonts = self.fonts

        dice_window = tk.Toplevel(self.root)
        dice_window.title("üé≤ –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π")
        dice_window.geometry("500x400")
        dice_window.minsize(420, 360)
        dice_window.configure(bg=colors["bg_dark"])

        container = tk.Frame(
            dice_window,
            bg=colors["bg_panel"],
            highlightbackground=colors["accent_muted"],
            highlightthickness=1,
            bd=0,
            padx=15,
            pady=15
        )
        container.pack(fill='both', expand=True, padx=20, pady=20)

        title_label = tk.Label(
            container,
            text="üé≤ –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π",
            font=fonts["title"],
            bg=colors["bg_panel"],
            fg=colors["accent_light"]
        )
        title_label.pack(pady=(0, 12))

        input_frame = tk.Frame(container, bg=colors["bg_panel"])
        input_frame.pack(fill='x', padx=5, pady=10)

        tk.Label(
            input_frame,
            text="–í–≤–µ–¥–∏—Ç–µ –±—Ä–æ—Å–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: d20, 2d6+3):",
            font=fonts["text"],
            bg=colors["bg_panel"],
            fg=colors["accent_light"]
        ).pack(anchor='w')

        dice_input = tk.Entry(
            input_frame,
            font=fonts["text"],
            width=20,
            bg=colors["bg_input"],
            fg=colors["text_dark"],
            insertbackground=colors["text_dark"],
            relief='flat',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
            highlightcolor=colors["accent"]
        )
        dice_input.pack(side='left', padx=(0, 10), pady=(6, 0))

        roll_button = tk.Button(
            input_frame,
            text="–ë—Ä–æ—Å–∏—Ç—å",
            command=lambda: self.roll_dice_from_input(dice_input, result_text),
            font=fonts["button"],
            bg=colors["button_primary"],
            fg=colors["button_text"],
            activebackground=colors["accent"],
            activeforeground=colors["text_dark"],
            relief='flat',
            bd=0,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
            padx=12,
            pady=4
        )
        roll_button.pack(side='left', pady=(6, 0))

        quick_frame = tk.Frame(container, bg=colors["bg_panel"])
        quick_frame.pack(fill='x', padx=5, pady=5)

        tk.Label(
            quick_frame,
            text="–ë—ã—Å—Ç—Ä—ã–µ –±—Ä–æ—Å–∫–∏:",
            font=fonts["text"],
            bg=colors["bg_panel"],
            fg=colors["accent_light"]
        ).pack(anchor='w')

        quick_buttons_frame = tk.Frame(quick_frame, bg=colors["bg_panel"])
        quick_buttons_frame.pack(fill='x', pady=5)

        quick_dice = ['d20', 'd12', 'd10', 'd8', 'd6', 'd4']
        for dice in quick_dice:
            btn = tk.Button(
                quick_buttons_frame,
                text=dice,
                command=lambda d=dice: self.quick_roll(d, result_text),
                font=fonts["text"],
                bg=colors["accent"],
                fg=colors["text_dark"],
                activebackground=colors["accent_light"],
                activeforeground=colors["text_dark"],
                relief='flat',
                bd=0,
                width=6,
                cursor='hand2',
                highlightthickness=1,
                highlightbackground=colors["accent_muted"]
            )
            btn.pack(side='left', padx=3, pady=2)

        result_text = scrolledtext.ScrolledText(
            container,
            wrap=tk.WORD,
            width=50,
            height=15,
            font=fonts["text"],
            bg=colors["bg_card"],
            fg=colors["text_dark"],
            state='disabled',
            relief='flat',
            borderwidth=0,
            highlightthickness=0,
            insertbackground=colors["text_dark"],
            selectbackground=colors["accent"],
            selectforeground=colors["text_dark"],
            padx=10,
            pady=10
        )
        try:
            result_text.config(disabledbackground=colors["bg_card"], disabledforeground=colors["text_dark"])
        except tk.TclError:
            pass
        result_text.pack(fill='both', expand=True, padx=5, pady=10)

        close_button = tk.Button(
            container,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            command=dice_window.destroy,
            font=fonts["button"],
            bg=colors["button_danger"],
            fg=colors["button_text"],
            activebackground="#a42822",
            activeforeground=colors["button_text"],
            relief='flat',
            bd=0,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
            padx=14,
            pady=6
        )
        close_button.pack(pady=10)

    def show_dice_challenge_dialog(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–∫–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ."""
        if self.active_dice_challenge:
            messagebox.showinfo(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –∏–¥—ë—Ç",
                "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—ë, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é.",
            )
            return

        scenario_label = self.current_scenario or "—Ç–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π"
        dialog = DiceChallengeDialog(
            self.root,
            theme=self.theme,
            fonts=self.fonts,
            scenario_label=scenario_label,
        )
        result = dialog.show()
        if not result:
            return

        self._activate_dice_challenge(result)

    def _activate_dice_challenge(self, data: Dict[str, object]) -> None:
        """–í–∫–ª—é—á–∞–µ—Ç –ø–∞–Ω–µ–ª—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±—ä—è–≤–ª—è–µ—Ç –µ—ë –∏–≥—Ä–æ–∫–∞–º."""

        title = str(data.get("title", "–ü—Ä–æ–≤–µ—Ä–∫–∞"))
        description = str(data.get("description", ""))
        dice = str(data.get("dice", "d20")).lower()
        dc = int(data.get("dc", 10))
        skill = str(data.get("skill", "")).strip()
        bonus_hint = str(data.get("bonus_hint", "")).strip()
        success_note = str(data.get("success", "")).strip()
        failure_note = str(data.get("failure", "")).strip()

        summary_parts = [
            f"–ß—Ç–æ–±—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å —Å—Ü–µ–Ω—É \"{title}\" —Ç—Ä–µ–±—É–µ—Ç—Å—è –±—Ä–æ—Å–æ–∫ {dice.upper()}.",
            description.strip() or "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –≥–µ—Ä–æ–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥—É–º–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
        ]
        if skill:
            summary_parts.append(
                f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–≤—ã–∫ –∏–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {skill}."
            )
        if bonus_hint:
            summary_parts.append(
                f"–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –±—Ä–æ—Å–∫–∞: {bonus_hint}."
            )
        summary_parts.append(
            f"–ù—É–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å {dc} –∏–ª–∏ –±–æ–ª—å—à–µ. –ü–æ—Å–ª–µ –±—Ä–æ—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥ –≤ —Ñ–æ—Ä–º—É –ø–æ–¥ —á–∞—Ç–æ–º."
        )

        announcement = "\n".join(summary_parts)
        self.add_to_chat("üé≠ –ú–∞—Å—Ç–µ—Ä", announcement)
        self.conversation_history.append({"role": "assistant", "content": announcement})

        self.challenge_desc_var.set(announcement)
        target_line = f"–¶–µ–ª—å –ø—Ä–æ–≤–µ—Ä–∫–∏: {dice.upper()} ‚â• {dc}."
        self.challenge_target_var.set(target_line)

        hint_lines: List[str] = []
        if success_note:
            hint_lines.append(f"–ü—Ä–∏ —É—Å–ø–µ—Ö–µ: {success_note}")
        if failure_note:
            hint_lines.append(f"–ü—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ: {failure_note}")
        if not hint_lines:
            hint_lines.append(
                "–£–∫–∞–∂–∏ –∏—Ç–æ–≥ —Å —É—á—ë—Ç–æ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤. –ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è, —Å–ª–æ–∂–∏ –±—Ä–æ—Å–æ–∫ d20 –∏ –±–æ–Ω—É—Å –Ω–∞–≤—ã–∫–∞."
            )
        else:
            hint_lines.append(
                "–°–æ–æ–±—â–∏ –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –º–∞—Å—Ç–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ, —á—Ç–æ–±—ã –æ–ø–∏—Å–∞—Ç—å –∏—Å—Ö–æ–¥."
            )
        self.challenge_hint_var.set("\n".join(hint_lines))

        self.challenge_result_var.set("")
        self.challenge_result_entry.delete(0, tk.END)
        self.challenge_frame.pack(fill='x', padx=5, pady=(8, 0))
        self.challenge_button.config(state='disabled')
        self.challenge_submit_button.config(state='normal', text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        self.challenge_cancel_button.config(state='normal')
        self.challenge_result_entry.focus_set()

        data["dc"] = dc
        data["dice"] = dice
        self.active_dice_challenge = data

    def _cancel_active_challenge(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É."""
        if not self.active_dice_challenge:
            self._reset_challenge_ui()
            return

        confirm = messagebox.askyesno(
            "–û—Ç–º–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏",
            "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑ –±—Ä–æ—Å–∫–∞?",
        )
        if not confirm:
            return

        self.add_to_chat(
            "üé≠ –ú–∞—Å—Ç–µ—Ä",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚Äî —Å—Ü–µ–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –±–µ–∑ –±—Ä–æ—Å–∫–∞.",
        )
        self.conversation_history.append(
            {
                "role": "assistant",
                "content": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–æ–º –±–µ–∑ –±—Ä–æ—Å–∫–∞.",
            }
        )
        self._reset_challenge_ui()

    def _reset_challenge_ui(self) -> None:
        self.active_dice_challenge = None
        self.challenge_desc_var.set("")
        self.challenge_target_var.set("")
        self.challenge_hint_var.set("")
        self.challenge_result_var.set("")
        self.challenge_frame.pack_forget()
        self.challenge_button.config(state='normal')
        self.challenge_submit_button.config(state='normal', text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        self.challenge_cancel_button.config(state='normal')

    def _submit_challenge_result(self) -> None:
        if not self.active_dice_challenge:
            messagebox.showinfo(
                "–ù–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏",
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞.",
            )
            return

        raw_value = self.challenge_result_var.get().strip()
        if not raw_value:
            messagebox.showwarning(
                "–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞",
                "–í–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥ –±—Ä–æ—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 17 –∏–ª–∏ 14+3.",
            )
            return

        total = self._parse_roll_total(raw_value)
        if total is None:
            messagebox.showwarning(
                "–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –∏ +/-. –ü—Ä–∏–º–µ—Ä: 15 –∏–ª–∏ 12+4.",
            )
            return

        title = str(self.active_dice_challenge.get("title", "–ü—Ä–æ–≤–µ—Ä–∫–∞"))

        self.add_to_chat(
            "üé≤ –ë—Ä–æ—Å–æ–∫",
            f"–ò–≥—Ä–æ–∫ —Å–æ–æ–±—â–∞–µ—Ç –∏—Ç–æ–≥ {total} ({raw_value}) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ \"{title}\".",
        )

        prompt = self._build_challenge_prompt(total)

        self.challenge_submit_button.config(state='disabled', text="–ñ–¥—ë–º —Ä–∞—Å—Å–∫–∞–∑...")
        self.challenge_cancel_button.config(state='disabled')

        thread = threading.Thread(
            target=self._resolve_challenge_thread,
            args=(prompt, total),
        )
        thread.daemon = True
        thread.start()

    def _build_challenge_prompt(self, total: int) -> str:
        challenge = self.active_dice_challenge or {}
        title = str(challenge.get("title", "–ü—Ä–æ–≤–µ—Ä–∫–∞"))
        description = str(challenge.get("description", ""))
        dice = str(challenge.get("dice", "d20")).upper()
        dc = int(challenge.get("dc", 10))
        skill = str(challenge.get("skill", "")).strip()
        success_note = str(challenge.get("success", "")).strip()
        failure_note = str(challenge.get("failure", "")).strip()
        bonus_hint = str(challenge.get("bonus_hint", "")).strip()

        lines = [
            f"–ò–≥—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç –ø—Ä–æ–≤–µ—Ä–∫—É \"{title}\".",
            f"–°—Ü–µ–Ω–∞: {description.strip() or '–ú–∞—Å—Ç–µ—Ä –æ–ø–∏—Å–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.'}",
            f"–¢—Ä–µ–±—É–µ–º—ã–π –±—Ä–æ—Å–æ–∫: {dice} –ø—Ä–æ—Ç–∏–≤ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {dc}.",
            f"–ò—Ç–æ–≥ –∏–≥—Ä–æ–∫–∞: {total}.",
        ]
        if skill:
            lines.append(f"–ó–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–≤—ã–∫/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {skill}.")
        if bonus_hint:
            lines.append(f"–ò–≥—Ä–æ–∫ —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É: {bonus_hint}.")

        if total >= dc:
            outcome_hint = "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–≤–µ–Ω –∏–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ —É—Å–ø–µ—Ö."
            if success_note:
                outcome_hint += f" –£—á—Ç–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞: {success_note}."
        else:
            outcome_hint = "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∏–∂–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞."
            if failure_note:
                outcome_hint += f" –£—á—Ç–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞: {failure_note}."
        lines.append(outcome_hint)
        lines.append(
            "–û–ø–∏—à–∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å—Ü–µ–Ω—ã, —É–∫–∞–∂–∏, –∫–∞–∫ —É—Å–ø–µ—Ö –∏–ª–∏ –ø—Ä–æ–≤–∞–ª –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—é–∂–µ—Ç, –∏ –¥–∞–π –∏–≥—Ä–æ–∫–∞–º –ø–æ–Ω—è—Ç–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥."
        )

        return "\n".join(lines)

    def _resolve_challenge_thread(self, prompt: str, total: int) -> None:
        try:
            response = self.get_master_response(prompt)
        except Exception as error:
            response = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {error}"

        self.root.after(
            0,
            lambda: self._finalize_challenge(response, total),
        )

    def _finalize_challenge(self, response: str, total: int) -> None:
        dc = int(self.active_dice_challenge.get("dc", 10)) if self.active_dice_challenge else 10
        dice = str(self.active_dice_challenge.get("dice", "d20")).upper() if self.active_dice_challenge else "D20"
        title = str(self.active_dice_challenge.get("title", "–ü—Ä–æ–≤–µ—Ä–∫–∞")) if self.active_dice_challenge else "–ü—Ä–æ–≤–µ—Ä–∫–∞"
        skill = str(self.active_dice_challenge.get("skill", "")).strip() if self.active_dice_challenge else ""

        if response.startswith("‚ùå"):
            self.add_to_chat("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞", response)
            self.challenge_submit_button.config(state='normal', text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            self.challenge_cancel_button.config(state='normal')
            self.challenge_hint_var.set(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –º–∞—Å—Ç–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É."
            )
            return

        recap_lines = [
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ \"{title}\": {total} –ø—Ä–æ—Ç–∏–≤ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {dc} (–±—Ä–æ—Å–æ–∫ {dice}).",
        ]
        if skill:
            recap_lines.append(f"–ù–∞–≤—ã–∫/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {skill}.")
        recap_text = " ".join(recap_lines)
        self.add_to_chat("üé≤ –ë—Ä–æ—Å–æ–∫", recap_text)

        self.add_to_chat("üé≠ –ú–∞—Å—Ç–µ—Ä", response)

        self._reset_challenge_ui()

    def _parse_roll_total(self, raw: str) -> Optional[int]:
        cleaned = raw.replace(" ", "")
        if not cleaned:
            return None
        if not re.fullmatch(r'[+-]?\d+(?:[+-]\d+)*', cleaned):
            return None
        total = 0
        for match in re.finditer(r'[+-]?\d+', cleaned):
            total += int(match.group())
        return total
    
    def roll_dice_from_input(self, input_widget, result_widget):
        """–ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏ –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞"""
        dice_string = input_widget.get().strip()
        if not dice_string:
            return
        
        result = dice_roller.roll_dice(dice_string)
        formatted_result = dice_roller.format_roll_result(result)
        
        result_widget.config(state='normal')
        result_widget.insert(tk.END, f"{formatted_result}\n")
        result_widget.config(state='disabled')
        result_widget.see(tk.END)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
        self.add_to_chat("üé≤ –ë—Ä–æ—Å–æ–∫", formatted_result)
    
    def quick_roll(self, dice_string, result_widget):
        """–ë—ã—Å—Ç—Ä—ã–π –±—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π"""
        result = dice_roller.roll_dice(dice_string)
        formatted_result = dice_roller.format_roll_result(result)
        
        result_widget.config(state='normal')
        result_widget.insert(tk.END, f"{formatted_result}\n")
        result_widget.config(state='disabled')
        result_widget.see(tk.END)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
        self.add_to_chat("üé≤ –ë—Ä–æ—Å–æ–∫", formatted_result)
    
    def exit_app(self):
        """–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if messagebox.askyesno("–í—ã—Ö–æ–¥", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã?"):
            self.root.quit()
            self.root.destroy()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()

class DiceChallengeDialog:
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –±—Ä–æ—Å–∫–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏."""

    def __init__(
        self,
        parent: tk.Tk,
        *,
        theme: Dict[str, str],
        fonts: Dict[str, tuple],
        scenario_label: str,
    ) -> None:
        self.parent = parent
        self.theme = theme
        self.fonts = fonts
        self.scenario_label = scenario_label
        self.result: Optional[Dict[str, object]] = None

        self.window = tk.Toplevel(parent)
        self.window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–µ–π")
        self.window.configure(bg=self.theme["bg_dark"])
        self.window.transient(parent)
        self.window.grab_set()
        self.window.resizable(True, True)
        self.window.minsize(720, 640)
        self.window.protocol("WM_DELETE_WINDOW", self._on_cancel)

        self.title_var = tk.StringVar()
        self.skill_var = tk.StringVar()
        self.dice_var = tk.StringVar(value="d20")
        self.dc_var = tk.StringVar(value="15")
        self.bonus_hint_var = tk.StringVar()

        self._build_ui()

    def show(self) -> Optional[Dict[str, object]]:
        self.window.wait_window()
        return self.result

    def _build_ui(self) -> None:
        colors = self.theme
        fonts = self.fonts

        container = tk.Frame(
            self.window,
            bg=colors["bg_panel"],
            padx=20,
            pady=20,
            highlightbackground=colors["accent_muted"],
            highlightthickness=1,
        )
        container.pack(fill="both", expand=True, padx=24, pady=24)

        heading = tk.Label(
            container,
            text=(
                "–£–∫–∞–∂–∏ –ø—Ä–æ–≤–µ—Ä–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏"
                f" '{self.scenario_label}'.\n"
                "–ò–≥—Ä–æ–∫–∏ —É–≤–∏–¥—è—Ç –≤—Å–µ —à–∞–≥–∏ —Å—Ä–∞–∑—É: –∫–∞–∫–∞—è —Å—Ü–µ–Ω–∞, –∫–∞–∫–∏–µ –∫–æ—Å—Ç–∏ –±—Ä–æ—Å–∏—Ç—å,"
                " –∫–∞–∫–æ–π –ø–æ—Ä–æ–≥ —É—Å–ø–µ—Ö–∞ –∏ —á—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ –±—Ä–æ—Å–∫–∞."
            ),
            bg=colors["bg_panel"],
            fg=colors["accent_light"],
            font=fonts["subtitle"],
            justify="left",
            wraplength=640,
        )
        heading.pack(anchor="w", pady=(0, 12))

        intro = tk.Label(
            container,
            text=(
                "–ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ:\n"
                "‚Ä¢ –ù–∞–∑–æ–≤–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≥–µ—Ä–æ—è –∏ —á—Ç–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –∫–æ–Ω.\n"
                "‚Ä¢ –£–∫–∞–∂–∏, –∫–∞–∫–∏–µ –∫–æ—Å—Ç–∏ –±—Ä–æ—Å–∞—Ç—å (–æ–±—ã—á–Ω–æ d20) –∏ –∫–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–∂–µ–Ω.\n"
                "‚Ä¢ –ü–æ–¥—Å–∫–∞–∂–∏, –∫–∞–∫–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ–Ω—É—Å –£–±–µ–∂–¥–µ–Ω–∏—è).\n"
                "‚Ä¢ –û–ø–∏—à–∏, —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –∏ –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ, —á—Ç–æ–±—ã –º–∞—Å—Ç–µ—Ä —Å–º–æ–≥ —è—Ä–∫–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥."
            ),
            bg=colors["bg_panel"],
            fg=colors["text_light"],
            font=fonts["text"],
            justify="left",
            wraplength=640,
        )
        intro.pack(anchor="w", pady=(0, 16))

        self._add_entry(
            container,
            "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏",
            (
                "–ö–∞–∫ –∫–æ—Ä–æ—Ç–∫–æ –Ω–∞–∑–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é. –ü—Ä–∏–º–µ—Ä—ã: '–£–±–µ–¥–∏—Ç—å —Å—Ç—Ä–∞–∂–Ω–∏–∫–∞',"
                " '–ü–µ—Ä–µ–ø—Ä—ã–≥–Ω—É—Ç—å –ø—Ä–æ–ø–∞—Å—Ç—å', '–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥—Ä–µ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç'."
            ),
            self.title_var,
        )

        self.description_text = self._add_text(
            container,
            "–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã",
            (
                "–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç: –∫—Ç–æ –¥–µ–π—Å—Ç–≤—É–µ—Ç, –≥–¥–µ, –∑–∞—á–µ–º."
                " –ü—Ä–∏–º–µ—Ä: '–ù–æ—á—å—é —É –≤–æ—Ä–æ—Ç –∑–∞–º–∫–∞ –≥–µ—Ä–æ–π –ø—ã—Ç–∞–µ—Ç—Å—è —É–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ–Ω–Ω–æ–≥–æ —Å—Ç—Ä–∞–∂–Ω–∏–∫–∞"
                " –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç—Ä—è–¥ –≤–Ω—É—Ç—Ä—å, –ø–æ–∫–∞ —Ç—Ä–µ–≤–æ–≥–∞ –Ω–µ –ø–æ–¥–Ω—è—Ç–∞'."
            ),
            height=5,
        )

        self._add_entry(
            container,
            "–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –Ω–∞–≤—ã–∫ –∏–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞",
            (
                "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞: '–•–∞—Ä–∏–∑–º–∞ (–£–±–µ–∂–¥–µ–Ω–∏–µ)', '–õ–æ–≤–∫–æ—Å—Ç—å (–ê–∫—Ä–æ–±–∞—Ç–∏–∫–∞)',"
                " '–ú—É–¥—Ä–æ—Å—Ç—å (–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å)'. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä."
            ),
            self.skill_var,
        )

        dice_frame = tk.Frame(container, bg=colors["bg_panel"])
        dice_frame.pack(fill="x", pady=(12, 4))

        dice_label = tk.Label(
            dice_frame,
            text="–ö–æ—Å—Ç–∏ –¥–ª—è –±—Ä–æ—Å–∫–∞",
            bg=colors["bg_panel"],
            fg=colors["accent_light"],
            font=fonts["subtitle"],
            anchor="w",
        )
        dice_label.pack(anchor="w")

        dice_hint = tk.Label(
            dice_frame,
            text=(
                "–ù–∞–ø—Ä–∏–º–µ—Ä: d20 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞), 2d6+1 (–¥–≤–∞ —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω–∏–∫–∞ –ø–ª—é—Å –±–æ–Ω—É—Å),"
                " d20+2 (–µ—Å–ª–∏ –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å)."
            ),
            bg=colors["bg_panel"],
            fg=colors["text_light"],
            font=fonts["text"],
            justify="left",
            wraplength=640,
        )
        dice_hint.pack(anchor="w", pady=(2, 4))

        dice_row = tk.Frame(dice_frame, bg=colors["bg_panel"])
        dice_row.pack(fill="x")

        tk.Entry(
            dice_row,
            textvariable=self.dice_var,
            bg=colors["bg_input"],
            fg=colors["text_dark"],
            insertbackground=colors["text_dark"],
        ).pack(side="left", padx=(0, 8))

        dc_label = tk.Label(
            dice_row,
            text="–ü–æ—Ä–æ–≥ —É—Å–ø–µ—Ö–∞ (DC)",
            bg=colors["bg_panel"],
            fg=colors["accent_light"],
            font=fonts["subtitle"],
        )
        dc_label.pack(side="left", padx=(12, 6))

        tk.Entry(
            dice_row,
            textvariable=self.dc_var,
            width=6,
            bg=colors["bg_input"],
            fg=colors["text_dark"],
            insertbackground=colors["text_dark"],
        ).pack(side="left")

        dc_hint = tk.Label(
            dice_frame,
            text=(
                "–û—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Å—è –Ω–∞ —Ç–∞–±–ª–∏—Ü—É D&D 5e: 5 ‚Äî –æ—á–µ–Ω—å –ª–µ–≥–∫–æ, 10 ‚Äî –ª–µ–≥–∫–æ, 15 ‚Äî —Å—Ä–µ–¥–Ω–µ,"
                " 20 ‚Äî —Å–ª–æ–∂–Ω–æ, 25 ‚Äî –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ, 30 ‚Äî –ø–æ—á—Ç–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."
            ),
            bg=colors["bg_panel"],
            fg=colors["text_light"],
            font=fonts["text"],
            justify="left",
            wraplength=640,
        )
        dc_hint.pack(anchor="w", pady=(4, 10))

        self._add_entry(
            container,
            "–ö–∞–∫ –∏–≥—Ä–æ–∫—É –ø–æ—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥",
            (
                "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ë—Ä–æ—Å—å d20 –∏ –¥–æ–±–∞–≤—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –•–∞—Ä–∏–∑–º—ã (+2) –∏ –±–æ–Ω—É—Å –£–±–µ–∂–¥–µ–Ω–∏—è (+3)'."
                " –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç —É–≤–∏–¥–∏—Ç –∏–≥—Ä–æ–∫ –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."
            ),
            self.bonus_hint_var,
        )

        self.success_text = self._add_text(
            container,
            "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ø—Ä–∏ —É—Å–ø–µ—Ö–µ",
            (
                "–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏ –∂–µ–ª–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç. –ü—Ä–∏–º–µ—Ä: '–°—Ç—Ä–∞–∂–Ω–∏–∫ —Å–º—è–≥—á–∞–µ—Ç—Å—è, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–ª–∏—Ç–∫—É"
                " –∏ –¥–∞–∂–µ –æ–±–µ—â–∞–µ—Ç –æ—Ç–≤–ª–µ—á—å –∫–∞–ø–∏—Ç–∞–Ω–∞'."
            ),
            height=4,
        )

        self.failure_text = self._add_text(
            container,
            "–ß—Ç–æ —Å–ª—É—á–∏—Ç—Å—è –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ",
            (
                "–ü—Ä–∏–º–µ—Ä: '–°—Ç—Ä–∞–∂–Ω–∏–∫ –Ω–∞—Å—Ç–æ—Ä–∞–∂–∏–≤–∞–µ—Ç—Å—è, –ø–æ–¥–Ω–∏–º–∞–µ—Ç —Ç—Ä–µ–≤–æ–≥—É –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É'"
                " –∏–ª–∏ '–ü–µ—Ä–µ–∫–ª–∞–¥–∏–Ω–∞ –æ–±—Ä—É—à–∏–≤–∞–µ—Ç—Å—è, –≥–µ—Ä–æ–π –ø–æ–ª—É—á–∞–µ—Ç 1–∫6 —É—Ä–æ–Ω–∞'."
            ),
            height=4,
        )

        buttons = tk.Frame(container, bg=colors["bg_panel"])
        buttons.pack(fill="x", pady=(16, 0))

        tk.Button(
            buttons,
            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É",
            command=self._on_save,
            font=fonts["button"],
            bg=colors["button_primary"],
            fg=colors["button_text"],
            activebackground=colors["accent"],
            activeforeground=colors["text_dark"],
            relief='flat',
            bd=0,
            cursor='hand2',
            padx=16,
            pady=8,
        ).pack(side="left")

        tk.Button(
            buttons,
            text="–û—Ç–º–µ–Ω–∞",
            command=self._on_cancel,
            font=fonts["button"],
            bg=colors["button_secondary"],
            fg=colors["button_text"],
            activebackground=colors["accent"],
            activeforeground=colors["text_dark"],
            relief='flat',
            bd=0,
            cursor='hand2',
            padx=16,
            pady=8,
        ).pack(side="right")

        self.title_var.set("–£–±–µ–¥–∏—Ç—å —Å—Ç—Ä–∞–∂–Ω–∏–∫–∞")
        self.skill_var.set("–•–∞—Ä–∏–∑–º–∞ (–£–±–µ–∂–¥–µ–Ω–∏–µ)")

    def _add_entry(
        self,
        parent: tk.Widget,
        label_text: str,
        hint_text: str,
        variable: tk.StringVar,
    ) -> None:
        frame = tk.Frame(parent, bg=self.theme["bg_panel"])
        frame.pack(fill="x", pady=(10, 4))

        tk.Label(
            frame,
            text=label_text,
            bg=self.theme["bg_panel"],
            fg=self.theme["accent_light"],
            font=self.fonts["subtitle"],
            anchor="w",
        ).pack(anchor="w")

        tk.Label(
            frame,
            text=hint_text,
            bg=self.theme["bg_panel"],
            fg=self.theme["text_light"],
            font=self.fonts["text"],
            justify="left",
            wraplength=640,
        ).pack(anchor="w", pady=(2, 4))

        tk.Entry(
            frame,
            textvariable=variable,
            bg=self.theme["bg_input"],
            fg=self.theme["text_dark"],
            insertbackground=self.theme["text_dark"],
        ).pack(fill="x")

    def _add_text(
        self,
        parent: tk.Widget,
        label_text: str,
        hint_text: str,
        *,
        height: int,
    ) -> tk.Text:
        frame = tk.Frame(parent, bg=self.theme["bg_panel"])
        frame.pack(fill="x", pady=(12, 4))

        tk.Label(
            frame,
            text=label_text,
            bg=self.theme["bg_panel"],
            fg=self.theme["accent_light"],
            font=self.fonts["subtitle"],
            anchor="w",
        ).pack(anchor="w")

        tk.Label(
            frame,
            text=hint_text,
            bg=self.theme["bg_panel"],
            fg=self.theme["text_light"],
            font=self.fonts["text"],
            justify="left",
            wraplength=640,
        ).pack(anchor="w", pady=(2, 4))

        text_widget = tk.Text(
            frame,
            height=height,
            wrap=tk.WORD,
            bg=self.theme["bg_input"],
            fg=self.theme["text_dark"],
            insertbackground=self.theme["text_dark"],
            relief="flat",
            highlightthickness=1,
            highlightbackground=self.theme["accent_muted"],
        )
        text_widget.pack(fill="x")
        return text_widget

    def _on_cancel(self) -> None:
        self.result = None
        self.window.destroy()

    def _on_save(self) -> None:
        title = self.title_var.get().strip()
        if not title:
            messagebox.showwarning("–ü—Ä–æ–≤–µ—Ä–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return

        description = self.description_text.get("1.0", tk.END).strip()
        if len(description) < 10:
            messagebox.showwarning(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞",
                "–û–ø–∏—à–∏ —Å—Ü–µ–Ω—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫–∏ –ø–æ–Ω–∏–º–∞–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç.",
            )
            return

        dice = self.dice_var.get().strip().lower()
        if not re.fullmatch(r"\d*d\d+(?:[+-]\d+)?", dice):
            messagebox.showwarning(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞",
                "–§–æ—Ä–º–∞—Ç –∫–æ—Å—Ç–µ–π –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ d20, 2d6 –∏–ª–∏ d20+2.",
            )
            return

        try:
            dc = int(self.dc_var.get().strip())
        except ValueError:
            messagebox.showwarning(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞",
                "–ü–æ—Ä–æ–≥ —É—Å–ø–µ—Ö–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä 15.",
            )
            return

        if not 1 <= dc <= 40:
            messagebox.showwarning(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞",
                "–ü–æ—Ä–æ–≥ —É—Å–ø–µ—Ö–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 40 (–æ–±—ã—á–Ω–æ 5-30).",
            )
            return

        skill = self.skill_var.get().strip()
        bonus_hint = self.bonus_hint_var.get().strip()
        success = self.success_text.get("1.0", tk.END).strip()
        failure = self.failure_text.get("1.0", tk.END).strip()

        self.result = {
            "title": title,
            "description": description,
            "dice": dice,
            "dc": dc,
            "skill": skill,
            "bonus_hint": bonus_hint,
            "success": success,
            "failure": failure,
        }
        self.window.destroy()

class FirstSceneDialog:
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ü–µ–Ω—ã."""

    def __init__(
        self,
        parent: tk.Tk,
        *,
        theme: Dict[str, str],
        fonts: Dict[str, tuple],
        scenario_label: str,
        generate_callback: Optional[Callable[[], str]] = None,
    ) -> None:
        self.parent = parent
        self.theme = theme
        self.fonts = fonts
        self.scenario_label = scenario_label
        self.result: Optional[str] = None
        self.generate_callback = generate_callback
        self._is_generating = False
        self._status_var = tk.StringVar(
            value=(
                "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –º–æ–∂–Ω–æ –Ω–∞–±—Ä–æ—Å–∞—Ç—å —Å—Ü–µ–Ω—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ"
                " –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'."
            )
        )
        self._auto_button: Optional[tk.Button] = None
        self._save_button: Optional[tk.Button] = None

        self.window = tk.Toplevel(parent)
        self.window.title("–ü–µ—Ä–≤–∞—è —Å—Ü–µ–Ω–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è")
        self.window.configure(bg=self.theme["bg_dark"])
        self.window.transient(parent)
        self.window.grab_set()
        self.window.resizable(True, True)
        self.window.minsize(720, 560)
        self.window.protocol("WM_DELETE_WINDOW", self._on_cancel)

        self._build_ui()

    def show(self) -> Optional[str]:
        self.window.wait_window()
        return self.result

    def _build_ui(self) -> None:
        colors = self.theme
        fonts = self.fonts

        container = tk.Frame(
            self.window,
            bg=colors["bg_panel"],
            padx=20,
            pady=20,
            highlightbackground=colors["accent_muted"],
            highlightthickness=1,
        )
        container.pack(fill="both", expand=True, padx=24, pady=24)

        title = tk.Label(
            container,
            text=(
                "–û–ø–∏—à–∏ –ø–µ—Ä–≤—É—é —Å—Ü–µ–Ω—É –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è "
                f"'{self.scenario_label}'.\n"
                "–≠—Ç–æ –ø–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤, –ø–æ—ç—Ç–æ–º—É —Ä–∞—Å—Å–∫–∞–∂–∏, –≥–¥–µ –æ–Ω–∏,"
                " —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏ –∫–∞–∫–∞—è —Ü–µ–ª—å –º–∞—è—á–∏—Ç –ø–µ—Ä–µ–¥ –Ω–∏–º–∏."
            ),
            bg=colors["bg_panel"],
            fg=colors["accent_light"],
            font=fonts["subtitle"],
            justify="left",
            wraplength=640,
        )
        title.pack(anchor="w", pady=(0, 12))

        tips_text = (
            "–ü–æ–¥—Å–∫–∞–∑–∫–∏:\n"
            "‚Ä¢ –ù–∞—á–Ω–∏ —Å –º–µ—Å—Ç–∞: —Ç–∞–≤–µ—Ä–Ω–∞, –∫–∞—Ä–∞–≤–∞–Ω, —Ö—Ä–∞–º, –ª–∞–≥–µ—Ä—å –∞—Ä—Ö–µ–æ–ª–æ–≥–æ–≤.\n"
            "‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –≥–µ—Ä–æ–∏ –≤–∏–¥—è—Ç –∏ —Å–ª—ã—à–∞—Ç: —à—É–º –¥–æ–∂–¥—è, –∑–∞–ø–∞—Ö –¥—ã–º–∞, —Ç–æ–ª–ø–∞.\n"
            "‚Ä¢ –£–∫–∞–∂–∏ —Ç—Ä–∏–≥–≥–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: –∑–∞–∫–∞–∑—á–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–∞–±–æ—Ç—É, –≤—Ä–∞—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è,\n"
            "  –∫—Ç–æ-—Ç–æ –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—â–∏.\n"
            "‚Ä¢ –ó–∞–≤–µ—Ä—à–∏ –∫—Ä—é—á–∫–æ–º –∏–ª–∏ —É–≥—Ä–æ–∑–æ–π: —Ç–∞–π–º–µ—Ä, –∑–∞–≥–∞–¥–∫–∞, –≤—Ä–∞–≥ –Ω–∞ –ø–æ–¥—Ö–æ–¥–µ."
        )
        tips_label = tk.Label(
            container,
            text=tips_text,
            bg=colors["bg_panel"],
            fg=colors["text_light"],
            font=fonts["text"],
            justify="left",
            wraplength=640,
        )
        tips_label.pack(anchor="w", pady=(0, 16))

        examples_title = tk.Label(
            container,
            text="–ü—Ä–∏–º–µ—Ä—ã –∂–∏–≤—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π:",
            bg=colors["bg_panel"],
            fg=colors["accent_light"],
            font=fonts["text"],
            anchor="w",
            justify="left",
        )
        examples_title.pack(anchor="w")

        examples = (
            "1) –î–æ–∂–¥–ª–∏–≤—ã–π –ø–æ—Ä—Ç. –ö–æ—Ä–∞–±–ª—å –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∏—Å—Ç–æ–≤ –≥–æ—Ä–∏—Ç, –∫–∞–ø–∏—Ç–∞–Ω –æ—Ä—ë—Ç:"
            " \"–°—É–Ω–¥—É–∫ –≤ —Ç—Ä—é–º–µ! –ö–ª—é—á —É —à–ø–∏–æ–Ω–∞ –Ω–∞ –ø—Ä–∏—á–∞–ª–µ!\" –í–¥–∞–ª–µ–∫–µ –ø–æ–∫–∞–∑–∞–ª–∏—Å—å —Å—Ç—Ä–∞–∂–∏.\n"
            "2) –ü—É—Å—Ç—ã–Ω–Ω—ã–π —Ö—Ä–∞–º. –ó–∞ –æ–±—Ä—É—à–µ–Ω–Ω–æ–π —Å—Ç–µ–Ω–æ–π —Å–∏—è–µ—Ç –≤—Ö–æ–¥ –≤ –≥—Ä–æ–±–Ω–∏—Ü—É."
            " –ñ—Ä–µ—Ü —à–µ–ø—á–µ—Ç: \"–ü–µ—á–∞—Ç–∏ –¥–µ—Ä–∂–∞—Ç –¥–µ–º–æ–Ω–∞, –Ω–æ –∑–≤—ë–∑–¥—ã —É–∂–µ –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è\"."
            " –ü–µ—Å—á–∞–Ω–∞—è –±—É—Ä—è –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ç—Ä–∏ –º–∏–Ω—É—Ç—ã.\n"
            "3) –Ø—Ä–º–∞—Ä–∫–∞ –≤ –¥–µ—Ä–µ–≤–Ω–µ. –ö—É–∫–æ–ª—å–Ω–∏–∫ –≤–¥—Ä—É–≥ —Ç–µ—Ä—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –º–∞—Ä–∏–æ–Ω–µ—Ç–∫–∞–º–∏,"
            " –Ω–∏—Ç–∫–∏ —Ä–≤—É—Ç—Å—è, –∞ –¥–µ—Ç–∏ –∫—Ä–∏—á–∞—Ç. –°—Ç–∞—Ä–æ—Å—Ç–∞ —É–º–æ–ª—è–µ—Ç: \"–í –∞–º–±–∞—Ä–µ —Ç–≤–æ—Ä–∏—Ç—Å—è\""
            " \"–Ω–µ—á—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ, —Å–ø–∞—Å–∏—Ç–µ –º–æ—é –¥–æ—á—å!\""
        )
        examples_box = scrolledtext.ScrolledText(
            container,
            wrap=tk.WORD,
            height=8,
            bg=colors["bg_card"],
            fg=colors["text_dark"],
            font=fonts["text"],
            relief="flat",
            borderwidth=0,
            highlightthickness=0,
        )
        examples_box.pack(fill="x", expand=False, pady=(4, 16))
        examples_box.insert(tk.END, examples)
        examples_box.config(state="disabled")

        prompt_label = tk.Label(
            container,
            text=(
                "–¢–µ–ø–µ—Ä—å –Ω–∞–±—Ä–æ—Å–∞–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å—Ü–µ–Ω—É (3-6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)."
                " –û–±–æ–∑–Ω–∞—á—å –º–µ—Å—Ç–æ, —Å–æ–±—ã—Ç–∏–µ –∏ —Ü–µ–ª—å –∏–ª–∏ —É–≥—Ä–æ–∑—É."
            ),
            bg=colors["bg_panel"],
            fg=colors["accent_light"],
            font=fonts["text"],
            justify="left",
            wraplength=640,
        )
        prompt_label.pack(anchor="w")

        self.scene_entry = scrolledtext.ScrolledText(
            container,
            wrap=tk.WORD,
            height=10,
            bg=colors["bg_input"],
            fg=colors["text_dark"],
            font=fonts["text"],
            relief="flat",
            borderwidth=0,
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
        )
        self.scene_entry.pack(fill="both", expand=True, pady=(6, 12))

        buttons = tk.Frame(container, bg=colors["bg_panel"])
        buttons.pack(fill="x", pady=(0, 0))

        cancel_button = tk.Button(
            buttons,
            text="–û—Ç–º–µ–Ω–∞",
            command=self._on_cancel,
            font=fonts["button"],
            bg=colors["button_secondary"],
            fg=colors["button_text"],
            activebackground=colors["accent"],
            activeforeground=colors["text_dark"],
            relief="flat",
            bd=0,
            cursor="hand2",
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
        )
        cancel_button.pack(side="left")

        self._auto_button = tk.Button(
            buttons,
            text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
            command=self._on_generate,
            font=fonts["button"],
            bg=colors["accent"],
            fg=colors["text_dark"],
            activebackground=colors["accent_light"],
            activeforeground=colors["text_dark"],
            relief="flat",
            bd=0,
            cursor="hand2",
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
            state="normal" if self.generate_callback else "disabled",
        )
        self._auto_button.pack(side="right", padx=(0, 10))

        self._save_button = tk.Button(
            buttons,
            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ü–µ–Ω—É",
            command=self._on_save,
            font=fonts["button"],
            bg=colors["button_primary"],
            fg=colors["button_text"],
            activebackground=colors["accent"],
            activeforeground=colors["text_dark"],
            relief="flat",
            bd=0,
            cursor="hand2",
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
        )
        self._save_button.pack(side="right")

        status_label = tk.Label(
            container,
            textvariable=self._status_var,
            bg=colors["bg_panel"],
            fg=colors["text_muted"],
            font=fonts["text"],
            justify="left",
            wraplength=640,
        )
        status_label.pack(anchor="w", pady=(12, 0))

    def _on_save(self) -> None:
        self.result = self.scene_entry.get("1.0", tk.END)
        self.window.destroy()

    def _on_cancel(self) -> None:
        self.result = None
        self.window.destroy()

    def _on_generate(self) -> None:
        if self._is_generating or not self.generate_callback:
            return

        self._is_generating = True
        if self._auto_button:
            self._auto_button.config(state="disabled", text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...")
        if self._save_button:
            self._save_button.config(state="disabled")
        self._status_var.set("–û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∑–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º —Å—Ü–µ–Ω—ã...")

        def worker() -> None:
            try:
                text = self.generate_callback()
            except Exception as error:
                message = str(error) or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                self.window.after(0, lambda: self._on_generation_failed(message))
            else:
                self.window.after(0, lambda: self._on_generation_success(text))

        thread = threading.Thread(target=worker, daemon=True)
        thread.start()

    def _on_generation_success(self, text: str) -> None:
        self._is_generating = False
        if self._auto_button:
            self._auto_button.config(state="normal", text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        if self._save_button:
            self._save_button.config(state="normal")

        cleaned = text.strip()
        if cleaned:
            self.scene_entry.delete("1.0", tk.END)
            self.scene_entry.insert(tk.END, cleaned)
            self.scene_entry.focus_set()
            self.scene_entry.see("end")

        self._status_var.set(
            "–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å—Ü–µ–Ω—ã –≥–æ—Ç–æ–≤. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø–æ–¥ —Å–≤–æ—é –ø–∞—Ä—Ç–∏—é –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'."
        )

    def _on_generation_failed(self, message: str) -> None:
        self._is_generating = False
        if self._auto_button:
            self._auto_button.config(state="normal", text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        if self._save_button:
            self._save_button.config(state="normal")

        self._status_var.set("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ü–µ–Ω—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ —Å–∞–º–∏.")
        messagebox.showerror(
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω—ã",
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: " + message,
            parent=self.window,
        )


class CharacterFormDialog:
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –æ–¥–Ω–æ–º —ç–∫—Ä–∞–Ω–µ."""

    def __init__(
        self,
        parent: tk.Tk,
        *,
        index: int,
        theme: Dict[str, str],
        fonts: Dict[str, tuple],
        stats_limit: int,
    ) -> None:
        self.parent = parent
        self.theme = theme
        self.fonts = fonts
        self.stats_limit = stats_limit
        self.index = index
        self.result: Optional[Dict[str, object]] = None

        self.window = tk.Toplevel(parent)
        self.window.title(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {index}: –∞–Ω–∫–µ—Ç–∞ –≥–µ—Ä–æ—è")
        self.window.configure(bg=self.theme["bg_dark"])
        self.window.transient(parent)
        self.window.grab_set()
        self.window.resizable(True, True)
        self.window.minsize(760, 720)
        self._scroll_bindings: List[tuple[str, Optional[str]]] = []
        self.window.protocol("WM_DELETE_WINDOW", self._prevent_close)

        self.name_var = tk.StringVar()
        self.role_var = tk.StringVar()
        self.concept_var = tk.StringVar()
        self.hp_var = tk.IntVar(value=10)
        self.trait_vars = [tk.StringVar(), tk.StringVar()]
        self.loadout_vars = [tk.StringVar(), tk.StringVar()]
        self.tags_var = tk.StringVar()

        self.stats_order = [
            (
                "str",
                "–°–∏–ª–∞ (STR)",
                "–ö–∞–∫ –≥–µ—Ä–æ–π —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å —Ç—è–∂—ë–ª–æ–π —Ä–∞–±–æ—Ç–æ–π –∏ –±–ª–∏–∂–Ω–∏–º –±–æ–µ–º."
                " –ü—Ä–∏–º–µ—Ä—ã: —Ä—ã—Ü–∞—Ä—å, –Ω–∞—ë–º–Ω–∏–∫, –∑–∞—â–∏—Ç–Ω–∏–∫ –¥–µ—Ä–µ–≤–Ω–∏.",
            ),
            (
                "dex",
                "–õ–æ–≤–∫–æ—Å—Ç—å (DEX)",
                "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞ –∑–∞ —Ç–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –º–µ—Ç–∫–æ—Å—Ç—å –∏ –∞–∫—Ä–æ–±–∞—Ç–∏–∫—É."
                " –ü—Ä–∏–º–µ—Ä—ã: –æ—Ö–æ—Ç–Ω–∏–∫, –≤–æ—Ä, —Å–ª–µ–¥–æ–ø—ã—Ç.",
            ),
            (
                "int",
                "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç (INT)",
                "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–Ω–∞–Ω–∏—è, —É—á—ë–Ω–æ—Å—Ç—å –∏ —É–º–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å."
                " –ü—Ä–∏–º–µ—Ä—ã: –º—É–¥—Ä–µ—Ü, –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ—Ä, –º–∞–≥-—Ç–µ–æ—Ä–µ—Ç–∏–∫.",
            ),
            (
                "wit",
                "–°–æ–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (WIT)",
                "–†–µ–∞–∫—Ü–∏—è, —Å–º–µ–∫–∞–ª–∫–∞ –∏ —É–º–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–µ—à–µ–Ω–∏—è."
                " –ü—Ä–∏–º–µ—Ä—ã: —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å, –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç, –º–µ—Ö–∞–Ω–∏–∫.",
            ),
            (
                "charm",
                "–û–±–∞—è–Ω–∏–µ (CHARM)",
                "–•–∞—Ä–∏–∑–º–∞, –ª–∏–¥–µ—Ä—Å—Ç–≤–æ –∏ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö."
                " –ü—Ä–∏–º–µ—Ä—ã: –¥–∏–ø–ª–æ–º–∞—Ç, –±–∞—Ä–¥, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –∫–∞–ø–∏—Ç–∞–Ω.",
            ),
        ]

        self.stats_vars: Dict[str, tk.IntVar] = {
            key: tk.IntVar(value=0) for key, *_ in self.stats_order
        }
        for var in self.stats_vars.values():
            var.trace_add("write", self._on_stat_change)

        self.points_label: Optional[tk.Label] = None
        self._build_ui()
        self._on_stat_change()

    def show(self) -> Optional[Dict[str, object]]:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
        self.window.wait_window()
        return self.result

    def _build_ui(self) -> None:
        colors = self.theme
        fonts = self.fonts

        outer = tk.Frame(self.window, bg=colors["bg_dark"])
        outer.pack(fill="both", expand=True, padx=0, pady=0)

        canvas = tk.Canvas(
            outer,
            bg=colors["bg_dark"],
            highlightthickness=0,
            bd=0,
        )
        canvas.pack(side="left", fill="both", expand=True)

        scrollbar = ttk.Scrollbar(outer, orient="vertical", command=canvas.yview)
        scrollbar.pack(side="right", fill="y")
        canvas.configure(yscrollcommand=scrollbar.set)

        container = tk.Frame(
            canvas,
            bg=colors["bg_panel"],
            padx=20,
            pady=20,
            highlightbackground=colors["accent_muted"],
            highlightthickness=1,
        )
        container_window = canvas.create_window((0, 0), window=container, anchor="nw")

        def _update_scroll_region(event: tk.Event) -> None:
            canvas.configure(scrollregion=canvas.bbox("all"))
            canvas.itemconfigure(container_window, width=event.width)

        container.bind("<Configure>", _update_scroll_region)

        def _on_canvas_resize(event: tk.Event) -> None:
            canvas.itemconfigure(container_window, width=event.width)

        canvas.bind("<Configure>", _on_canvas_resize)

        def _bind_scroll_events(target: tk.Widget) -> None:
            def _on_mousewheel(event: tk.Event) -> None:
                if event.delta:
                    canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")

            def _on_button4(_: tk.Event) -> None:
                canvas.yview_scroll(-3, "units")

            def _on_button5(_: tk.Event) -> None:
                canvas.yview_scroll(3, "units")

            sequences = [
                ("<MouseWheel>", _on_mousewheel),
                ("<Button-4>", _on_button4),
                ("<Button-5>", _on_button5),
            ]
            for sequence, callback in sequences:
                binding = target.bind_all(sequence, callback, add="+")
                self._scroll_bindings.append((sequence, binding))

        _bind_scroll_events(canvas)
        self.window.bind("<Destroy>", lambda _event: self._cleanup_scroll_events(), add="+")

        intro_text = (
            "–í—Å–µ —ç—Ç–∞–ø—ã —Å–æ–∑–¥–∞–Ω–∏—è –≥–µ—Ä–æ—è —Å–æ–±—Ä–∞–Ω—ã –Ω–∞ –æ–¥–Ω–æ–º —ç–∫—Ä–∞–Ω–µ.\n"
            "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ: –∏–º—è, —Ä–æ–ª—å, –∫–æ–Ω—Ü–µ–ø—Ç, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —á–µ—Ä—Ç—ã, —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –∏ —Ç–µ–≥–∏.\n"
            "–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –¥–æ"
            f" {self.stats_limit} –æ—á–∫–æ–≤ –º–µ–∂–¥—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ (–∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç -1 –¥–æ +3).\n"
            "–ü—Ä–∏–º–µ—Ä –≥–æ—Ç–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è: –õ–∏—Å—Å–∞ –¢–µ–Ω–∏—Å—Ç–∞—è ‚Äî –ª–æ–≤–∫–∏–π —Ä–∞–∑–≤–µ–¥—á–∏–∫,"
            " —Å—Ç—Ä–µ–º–∏—Ç—Å—è –¥–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –º–æ–∂–µ—Ç –∑–∞—â–∏—Ç–∏—Ç—å –¥—Ä—É–∑–µ–π."
        )
        intro = tk.Label(
            container,
            text=intro_text,
            bg=colors["bg_panel"],
            fg=colors["text_light"],
            font=fonts["text"],
            justify="left",
            wraplength=680,
        )
        intro.pack(anchor="w")

        general_frame = self._make_section(container, "–û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è")
        self.name_entry = self._add_entry(
            general_frame,
            "–ò–º—è –≥–µ—Ä–æ—è",
            (
                "–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤—É—á–Ω–æ–µ –∏–º—è –∏–ª–∏ –ø—Ä–æ–∑–≤–∏—â–µ."
                " –ü—Ä–∏–º–µ—Ä—ã: –ê—Ä–∏–Ω –•—Ä–∞–±—Ä—ã–π, –ú–∏—Ä—Ä–∞ –®–µ–ø–æ—Ç-–†—É—á—å—è,"
                " –¢–æ—Ä–≤–∞–ª—å–¥ –ú–æ–ª–æ—Ç, –ó–æ—è –ò—Å–∫—Ä–∞, –†–∏–Ω –°–µ–¥–æ–π-–í–µ—Ç–µ—Ä."
            ),
            self.name_var,
        )
        self._add_entry(
            general_frame,
            "–†–æ–ª—å –≤ –∫–æ–º–∞–Ω–¥–µ",
            (
                "–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –≤–∫–ª–∞–¥ –≥–µ—Ä–æ—è."
                " –ü—Ä–∏–º–µ—Ä—ã: —Ä–∞–∑–≤–µ–¥—á–∏–∫, —Ü–µ–ª–∏—Ç–µ–ª—å, –º–µ—á–Ω–∏–∫, –∑–∞—â–∏—Ç–Ω–∏–∫, –æ—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –∑–Ω–∞–Ω–∏—è–º–∏,"
                " –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –ª–∏–¥–µ—Ä."
            ),
            self.role_var,
        )
        self._add_entry(
            general_frame,
            "–ö–æ–Ω—Ü–µ–ø—Ç –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è",
            (
                "–û–ø–∏—à–∏—Ç–µ –≥–µ—Ä–æ—è –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π: –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ + —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ."
                " –ü—Ä–∏–º–µ—Ä—ã: '–ò–∑–≥–Ω–∞–Ω–Ω—ã–π —Ä—ã—Ü–∞—Ä—å –∏—â–µ—Ç –∏—Å–∫—É–ø–ª–µ–Ω–∏—è',"
                " '–î–µ—Ä–µ–≤–µ–Ω—Å–∫–∞—è —Ç—Ä–∞–≤–Ω–∏—Ü–∞ —Ö–æ—á–µ—Ç –¥–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å',"
                " '–ë—ã–≤—à–∏–π —Å–æ–ª–¥–∞—Ç –æ–±–µ—Ä–µ–≥–∞–µ—Ç –¥—Ä—É–∑–µ–π –ª—é–±–æ–π —Ü–µ–Ω–æ–π'."
            ),
            self.concept_var,
        )

        stats_frame = self._make_section(container, "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
        stats_hint = tk.Label(
            stats_frame,
            text=(
                "–ö–∞–∂–¥—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –≥–µ—Ä–æ—è."
                " –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç -1 –¥–æ +3.\n"
                "–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –¥–æ"
                f" {self.stats_limit} –æ—á–∫–æ–≤. –ü—Ä–∏–º–µ—Ä—ã –≥–æ—Ç–æ–≤—ã—Ö —Å–µ—Ç–æ–≤:\n"
                "  ‚Ä¢ –°–∏–ª–∞—á-—Å—Ç—Ä–∞–∂: STR 3, DEX 1, INT 0, WIT 0, CHARM -1\n"
                "  ‚Ä¢ –õ–æ–≤–∫–∏–π —Ä–∞–∑–≤–µ–¥—á–∏–∫: STR 0, DEX 3, INT 1, WIT 1, CHARM 0\n"
                "  ‚Ä¢ –î–∏–ø–ª–æ–º–∞—Ç: STR -1, DEX 0, INT 1, WIT 2, CHARM 3"
            ),
            bg=colors["bg_panel"],
            fg=colors["text_light"],
            font=fonts["text"],
            justify="left",
            wraplength=680,
        )
        stats_hint.pack(anchor="w", pady=(4, 6))

        for key, label, description in self.stats_order:
            row = tk.Frame(stats_frame, bg=colors["bg_panel"])
            row.pack(fill="x", pady=3)
            label_widget = tk.Label(
                row,
                text=label,
                bg=colors["bg_panel"],
                fg=colors["accent_light"],
                font=fonts["text"],
                width=18,
                anchor="w",
            )
            label_widget.pack(side="left")

            spin = tk.Spinbox(
                row,
                from_=-1,
                to=3,
                textvariable=self.stats_vars[key],
                width=5,
                justify="center",
                bg=colors["bg_input"],
                fg=colors["text_dark"],
                insertbackground=colors["text_dark"],
            )
            spin.pack(side="left", padx=6)

            desc_label = tk.Label(
                row,
                text=description,
                bg=colors["bg_panel"],
                fg=colors["text_light"],
                font=fonts["text"],
                justify="left",
                wraplength=480,
            )
            desc_label.pack(side="left", fill="x", expand=True)

        self.points_label = tk.Label(
            stats_frame,
            bg=colors["bg_panel"],
            fg=colors["accent_light"],
            font=fonts["text"],
            anchor="w",
            justify="left",
        )
        self.points_label.pack(fill="x", pady=(6, 0))

        hp_frame = self._make_section(container, "–û—á–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è (HP)")
        hp_hint = tk.Label(
            hp_frame,
            text=(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 8 –¥–æ 14.\n"
                "8 ‚Äî –≥–µ—Ä–æ–π —Ö—Ä—É–ø–∫–∏–π –∏ –¥–æ–ª–∂–µ–Ω –∏–∑–±–µ–≥–∞—Ç—å –ø—Ä—è–º—ã—Ö —É–¥–∞—Ä–æ–≤.\n"
                "10 ‚Äî —Å—Ä–µ–¥–Ω—è—è —Å—Ç–æ–π–∫–æ—Å—Ç—å. 12-14 ‚Äî –∑–∞–∫–∞–ª—ë–Ω–Ω—ã–π –±–æ–µ—Ü –∏–ª–∏ –æ–ø—ã—Ç–Ω—ã–π –≤—ã–∂–∏–≤—à–∏–π."
            ),
            bg=colors["bg_panel"],
            fg=colors["text_light"],
            font=fonts["text"],
            justify="left",
            wraplength=680,
        )
        hp_hint.pack(anchor="w", pady=(4, 4))

        hp_row = tk.Frame(hp_frame, bg=colors["bg_panel"])
        hp_row.pack(anchor="w", pady=(0, 4))
        hp_label = tk.Label(
            hp_row,
            text="HP",
            bg=colors["bg_panel"],
            fg=colors["accent_light"],
            font=fonts["text"],
        )
        hp_label.pack(side="left")
        hp_spin = tk.Spinbox(
            hp_row,
            from_=8,
            to=14,
            textvariable=self.hp_var,
            width=5,
            justify="center",
            bg=colors["bg_input"],
            fg=colors["text_dark"],
            insertbackground=colors["text_dark"],
        )
        hp_spin.pack(side="left", padx=6)

        traits_frame = self._make_section(container, "–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞")
        traits_hint = tk.Label(
            traits_frame,
            text=(
                "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–≤–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —á–µ—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä –≥–µ—Ä–æ—è.\n"
                "–ü—Ä–∏–º–µ—Ä—ã –ø–∞—Ä: —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω—ã–π –∏ –±–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π; —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏ –ø—Ä–µ–¥–∞–Ω–Ω—ã–π;"
                " –≤–µ—Å—ë–ª—ã–π –∏ —Å—É–µ–≤–µ—Ä–Ω—ã–π; —á–µ—Å—Ç–Ω—ã–π –∏ —É–ø—Ä—è–º—ã–π."
            ),
            bg=colors["bg_panel"],
            fg=colors["text_light"],
            font=fonts["text"],
            justify="left",
            wraplength=680,
        )
        traits_hint.pack(anchor="w", pady=(4, 4))

        traits_row = tk.Frame(traits_frame, bg=colors["bg_panel"])
        traits_row.pack(fill="x")
        for var in self.trait_vars:
            entry = tk.Entry(
                traits_row,
                textvariable=var,
                bg=colors["bg_input"],
                fg=colors["text_dark"],
                insertbackground=colors["text_dark"],
            )
            entry.pack(side="left", fill="x", expand=True, padx=4, pady=2)

        loadout_frame = self._make_section(container, "–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ")
        loadout_hint = tk.Label(
            loadout_frame,
            text=(
                "–£–∫–∞–∂–∏—Ç–µ –¥–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≥–µ—Ä–æ–π –≤—ã—Ö–æ–¥–∏—Ç –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ.\n"
                "–°–æ—á–µ—Ç–∞–π—Ç–µ –æ—Ä—É–∂–∏–µ, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –ø–∞–º—è—Ç–Ω—ã–µ –º–µ–ª–æ—á–∏.\n"
                "–ü—Ä–∏–º–µ—Ä—ã: –∫–æ—Ä–æ—Ç–∫–∏–π –º–µ—á –∏ –≤–µ—Ä—ë–≤–∫–∞; —Ç—Ä–∞–≤—è–Ω–æ–π –Ω–∞–±–æ—Ä –∏ –ø–æ—Å–æ—Ö;"
                " –∞—Ä–±–∞–ª–µ—Ç –∏ –Ω–∞–±–æ—Ä –æ—Ç–º—ã—á–µ–∫; —Å–µ–º–µ–π–Ω—ã–π –∞–º—É–ª–µ—Ç –∏ –¥–æ—Ä–æ–∂–Ω—ã–π –ø–ª–∞—â."
            ),
            bg=colors["bg_panel"],
            fg=colors["text_light"],
            font=fonts["text"],
            justify="left",
            wraplength=680,
        )
        loadout_hint.pack(anchor="w", pady=(4, 4))

        loadout_row = tk.Frame(loadout_frame, bg=colors["bg_panel"])
        loadout_row.pack(fill="x")
        for var in self.loadout_vars:
            entry = tk.Entry(
                loadout_row,
                textvariable=var,
                bg=colors["bg_input"],
                fg=colors["text_dark"],
                insertbackground=colors["text_dark"],
            )
            entry.pack(side="left", fill="x", expand=True, padx=4, pady=2)

        tags_frame = self._make_section(container, "–ò–≥—Ä–æ–≤—ã–µ —Ç–µ–≥–∏")
        tags_hint = tk.Label(
            tags_frame,
            text=(
                "–ù–∞–ø–∏—à–∏—Ç–µ 1-2 –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ç–µ–≥–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç —Å—Ç–∏–ª—å –≥–µ—Ä–æ—è –≤ –∏–≥—Ä–µ.\n"
                "–ü–æ–¥—Å–∫–∞–∑–∫–∏: stealth (—Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å), combat (–±–æ–π), social (–æ–±—â–µ–Ω–∏–µ),"
                " healer, scholar, arcane, support, leader, survival, nature."
            ),
            bg=colors["bg_panel"],
            fg=colors["text_light"],
            font=fonts["text"],
            justify="left",
            wraplength=680,
        )
        tags_hint.pack(anchor="w", pady=(4, 4))

        tags_entry = tk.Entry(
            tags_frame,
            textvariable=self.tags_var,
            bg=colors["bg_input"],
            fg=colors["text_dark"],
            insertbackground=colors["text_dark"],
        )
        tags_entry.pack(fill="x", padx=4, pady=(0, 4))

        submit_button = tk.Button(
            container,
            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
            command=self._on_submit,
            font=fonts["button"],
            bg=colors["button_primary"],
            fg=colors["button_text"],
            activebackground=colors["accent"],
            activeforeground=colors["text_dark"],
            relief="flat",
            bd=0,
            cursor="hand2",
            padx=16,
            pady=8,
        )
        submit_button.pack(pady=(12, 0))

        self.name_entry.focus_set()
        self.window.bind("<Return>", self._submit_event)

    def _make_section(self, parent: tk.Widget, title: str) -> tk.Frame:
        frame = tk.Frame(parent, bg=self.theme["bg_panel"])
        frame.pack(fill="x", pady=(16, 4))
        heading = tk.Label(
            frame,
            text=title,
            bg=self.theme["bg_panel"],
            fg=self.theme["accent_light"],
            font=self.fonts["subtitle"],
            anchor="w",
        )
        heading.pack(anchor="w")
        return frame

    def _add_entry(
        self,
        parent: tk.Widget,
        label_text: str,
        hint_text: str,
        variable: tk.StringVar,
    ) -> tk.Entry:
        wrapper = tk.Frame(parent, bg=self.theme["bg_panel"])
        wrapper.pack(fill="x", pady=(6, 2))
        label = tk.Label(
            wrapper,
            text=label_text,
            bg=self.theme["bg_panel"],
            fg=self.theme["accent_light"],
            font=self.fonts["text"],
            anchor="w",
        )
        label.pack(anchor="w")
        entry = tk.Entry(
            wrapper,
            textvariable=variable,
            bg=self.theme["bg_input"],
            fg=self.theme["text_dark"],
            insertbackground=self.theme["text_dark"],
        )
        entry.pack(fill="x", padx=4, pady=(2, 0))
        hint = tk.Label(
            wrapper,
            text=hint_text,
            bg=self.theme["bg_panel"],
            fg=self.theme["text_light"],
            font=self.fonts["text"],
            justify="left",
            wraplength=680,
        )
        hint.pack(anchor="w", padx=4, pady=(1, 0))
        return entry

    def _on_stat_change(self, *args) -> None:
        total = 0
        for key, var in self.stats_vars.items():
            try:
                value = int(var.get())
            except (tk.TclError, ValueError):
                value = 0
            if value < -1:
                var.set(-1)
                value = -1
            if value > 3:
                var.set(3)
                value = 3
            total += value

        remaining = self.stats_limit - total
        if self.points_label is not None:
            if total > self.stats_limit:
                text = (
                    f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {total} –æ—á–∫–æ–≤. –£–º–µ–Ω—å—à–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏,"
                    f" —á—Ç–æ–±—ã —É–ª–æ–∂–∏—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç {self.stats_limit}."
                )
                color = self.theme["button_danger"]
            else:
                text = (
                    f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {total} –∏–∑ {self.stats_limit} –æ—á–∫–æ–≤."
                    f" –û—Å—Ç–∞–ª–æ—Å—å {remaining}."
                )
                color = self.theme["accent_light"]
            self.points_label.config(text=text, fg=color)

    def _submit_event(self, event) -> None:  # type: ignore[override]
        self._on_submit()

    def _on_submit(self) -> None:
        name = self.name_var.get().strip()
        if not name:
            messagebox.showwarning(
                "–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
                "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥–µ—Ä–æ—è. –î–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤—ã—à–µ.",
                parent=self.window,
            )
            return

        role = self.role_var.get().strip()
        if not role:
            messagebox.showwarning(
                "–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
                "–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å –≥–µ—Ä–æ—è –≤ –≥—Ä—É–ø–ø–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑–≤–µ–¥—á–∏–∫ –∏–ª–∏ –º–∞–≥ –ø–æ–¥–¥–µ—Ä–∂–∫–∏).",
                parent=self.window,
            )
            return

        concept = self.concept_var.get().strip()
        if not concept:
            messagebox.showwarning(
                "–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
                "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Ü–µ–ø—Ç: –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ + —Ü–µ–ª—å –≥–µ—Ä–æ—è.",
                parent=self.window,
            )
            return

        stats: Dict[str, int] = {}
        total = 0
        for key, _label, _desc in self.stats_order:
            try:
                value = int(self.stats_vars[key].get())
            except (ValueError, tk.TclError):
                value = 0
            if value < -1 or value > 3:
                messagebox.showwarning(
                    "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
                    "–ö–∞–∂–¥–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç -1 –¥–æ +3.",
                    parent=self.window,
                )
                return
            stats[key] = value
            total += value

        if total > self.stats_limit:
            messagebox.showwarning(
                "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
                (
                    f"–í—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª–∏ {total} –æ—á–∫–æ–≤."
                    f" –£–º–µ–Ω—å—à–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã —É–ª–æ–∂–∏—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç {self.stats_limit}."
                ),
                parent=self.window,
            )
            return

        hp = int(self.hp_var.get())
        if hp < 8 or hp > 14:
            messagebox.showwarning(
                "–û—á–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è",
                "HP –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 8 –¥–æ 14.",
                parent=self.window,
            )
            return

        traits = [var.get().strip() for var in self.trait_vars]
        if any(not trait for trait in traits):
            messagebox.showwarning(
                "–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞",
                "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–µ —á–µ—Ä—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.",
                parent=self.window,
            )
            return

        loadout = [var.get().strip() for var in self.loadout_vars]
        if any(not item for item in loadout):
            messagebox.showwarning(
                "–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ",
                "–£–∫–∞–∂–∏—Ç–µ –¥–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –≥–µ—Ä–æ—è.",
                parent=self.window,
            )
            return

        tags_raw = self.tags_var.get().strip()
        tags = [item.strip() for item in re.split(r"[;,]+", tags_raw) if item.strip()]
        if not (1 <= len(tags) <= 2):
            messagebox.showwarning(
                "–ò–≥—Ä–æ–≤—ã–µ —Ç–µ–≥–∏",
                "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å 1 –∏–ª–∏ 2 —Ç–µ–≥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä stealth, combat, support.",
                parent=self.window,
            )
            return

        self.result = {
            "name": name,
            "role": role,
            "concept": concept,
            "stats": stats,
            "hp": hp,
            "traits": traits,
            "loadout": loadout,
            "tags": tags,
        }
        self.window.destroy()

    def _prevent_close(self) -> None:
        messagebox.showwarning(
            "–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'.",
            parent=self.window,
        )

    def _cleanup_scroll_events(self) -> None:
        if not getattr(self, "_scroll_bindings", None):
            return
        for sequence, _binding in self._scroll_bindings:
            try:
                self.window.unbind_all(sequence)
            except tk.TclError:
                continue
        self._scroll_bindings.clear()

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    try:
        app = DnDMasterGUI()
        app.run()
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}")

if __name__ == "__main__":
    main()
