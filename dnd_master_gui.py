#!/usr/bin/env python3
"""
GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è D&D –º–∞—Å—Ç–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API
"""

import os
import sys
import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
from dotenv import load_dotenv
from openai import OpenAI
import threading
import random
import yaml
import re
from dice_system import dice_roller

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class DnDMasterGUI:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root = tk.Tk()
        self.root.title("üé≤ D&D Master AI")

        # –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –∏ —à—Ä–∏—Ñ—Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω—ã –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–≥–æ D&D
        self.theme = {
            "bg_dark": "#1b1410",
            "bg_panel": "#241a16",
            "bg_card": "#f7f0d6",
            "bg_input": "#f2e8cf",
            "accent": "#c08429",
            "accent_light": "#e7c46b",
            "accent_muted": "#9c6b30",
            "button_primary": "#7b3f00",
            "button_secondary": "#5b2d10",
            "button_danger": "#7d1f1a",
            "button_text": "#f8efdb",
            "text_light": "#f5e9cf",
            "text_dark": "#2d1b10",
            "text_muted": "#d2b792",
            "dice_highlight": "#3f6e88"
        }
        self.fonts = {
            "title": ("Georgia", 20, "bold"),
            "subtitle": ("Georgia", 12, "bold"),
            "text": ("Georgia", 11),
            "button": ("Georgia", 11, "bold")
        }

        self.configure_theme()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        self.api_key = os.getenv('OPENAI_API_KEY')
        if not self.api_key:
            messagebox.showerror("–û—à–∏–±–∫–∞", 
                               "–ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!\n"
                               "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç—É–¥–∞ –≤–∞—à API –∫–ª—é—á:\n"
                               "OPENAI_API_KEY=your_key_here")
            sys.exit(1)
        
        self.client = OpenAI(api_key=self.api_key)
        self.conversation_history = []
        self.world_bible = None
        self.game_rules = None
        self.story_arc = None
        self.story_file = "story_arc.md"
        self.session_mode = "new"
        self.story_status_message = ""
        self.last_error_message = ""
        self.models = {
            "world": os.getenv("DND_WORLD_MODEL", "gpt-4o-mini"),
            "story": os.getenv("DND_STORY_MODEL", "gpt-4o-mini"),
            "master": os.getenv("DND_MASTER_MODEL", "gpt-4o-mini"),
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
        self.load_game_rules()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–∏–±–ª–∏—é –º–∏—Ä–∞
        self.initialize_world_bible()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—é–∂–µ—Ç –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
        self.initialize_story_arc()
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è D&D –º–∞—Å—Ç–µ—Ä–∞
        self.update_system_prompt()
        
        self.setup_ui()

    def configure_theme(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ–∫–Ω–∞."""
        self.root.geometry("900x800")
        self.root.configure(bg=self.theme["bg_dark"])
        self.root.option_add("*Font", self.fonts["text"])
        self.root.option_add("*Foreground", self.theme["text_light"])
        self.root.option_add("*Background", self.theme["bg_dark"])
    
    def load_game_rules(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∏–∑ rules.yaml"""
        try:
            with open('rules.yaml', 'r', encoding='utf-8') as f:
                self.game_rules = yaml.safe_load(f)
            print("üìã –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–≤–∏–ª: {e}")
            self.game_rules = {}
    
    def initialize_world_bible(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ë–∏–±–ª–∏–∏ –º–∏—Ä–∞"""
        bible_file = "world_bible.md"
        
        if os.path.exists(bible_file):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ë–∏–±–ª–∏—é –º–∏—Ä–∞
            try:
                with open(bible_file, 'r', encoding='utf-8') as f:
                    self.world_bible = f.read()
                print("üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ë–∏–±–ª–∏—è –º–∏—Ä–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ë–∏–±–ª–∏–∏ –º–∏—Ä–∞: {e}")
                self.generate_world_bible()
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ë–∏–±–ª–∏—é –º–∏—Ä–∞
            print("üåç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –ë–∏–±–ª–∏—è –º–∏—Ä–∞...")
            self.generate_world_bible()
    
    def generate_world_bible(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –ë–∏–±–ª–∏—é –º–∏—Ä–∞"""
        try:
            # –°–ª—É—á–∞–π–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞
            settings = [
                "–§—ç–Ω—Ç–µ–∑–∏ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å—Ç–∏–º–ø–∞–Ω–∫–∞",
                "–¢–µ–º–Ω–æ–µ —Ñ—ç–Ω—Ç–µ–∑–∏ —Å –≥–æ—Ç–∏—á–µ—Å–∫–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏", 
                "–ö–∏–±–µ—Ä–ø–∞–Ω–∫ —Å –º–∞–≥–∏–µ–π",
                "–ü–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Ç–∏—á–µ—Å–∫–æ–µ —Ñ—ç–Ω—Ç–µ–∑–∏",
                "–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤–æ–µ —Ñ—ç–Ω—Ç–µ–∑–∏ —Å –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Ç—Ä–∏–≥–∞–º–∏",
                "–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Ä–µ–∞–ª–∏–∑–º –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ",
                "–°–∫–∞–∑–æ—á–Ω–æ–µ —Ñ—ç–Ω—Ç–µ–∑–∏ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ö–æ—Ä—Ä–æ—Ä–∞"
            ]
            
            tones = [
                "–º—Ä–∞—á–Ω—ã–π –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π",
                "–≥–µ—Ä–æ–∏—á–µ—Å–∫–∏–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π", 
                "–∑–∞–≥–∞–¥–æ—á–Ω—ã–π –∏ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π",
                "—ç–ø–∏—á–µ—Å–∫–∏–π –∏ –¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π",
                "–∏–Ω—Ç—Ä–∏–≥—É—é—â–∏–π –∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π",
                "—Ç–µ–º–Ω—ã–π –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–π",
                "—Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–∏–π"
            ]
            
            genres = [
                "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ö–æ—Ä—Ä–æ—Ä–∞",
                "–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç—Ä–∏–≥–∏ —Å –º–∞–≥–∏–µ–π",
                "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥—Ä–µ–≤–Ω–∏—Ö —Ä—É–∏–Ω",
                "–≤–æ–π–Ω–∞ –º–µ–∂–¥—É —Ñ—Ä–∞–∫—Ü–∏—è–º–∏",
                "–º–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
                "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏",
                "–≤—ã–∂–∏–≤–∞–Ω–∏–µ –≤ –æ–ø–∞—Å–Ω—ã—Ö –∑–µ–º–ª—è—Ö"
            ]
            
            selected_setting = random.choice(settings)
            selected_tone = random.choice(tones)
            selected_genre = random.choice(genres)
            
            world_prompt = f"""–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é –ë–∏–±–ª–∏—é –º–∏—Ä–∞ –¥–ª—è D&D –∫–∞–º–ø–∞–Ω–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

# –ë–ò–ë–õ–ò–Ø –ú–ò–†–ê

## –°–ï–¢–¢–ò–ù–ì
{selected_setting}

## –¢–û–ù –ò –°–¢–ò–õ–¨
–¢–æ–Ω –∫–∞–º–ø–∞–Ω–∏–∏: {selected_tone}
–ñ–∞–Ω—Ä–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞: {selected_genre}

## –í–ï–õ–ò–ö–ò–ï –¢–ê–ë–£ (—á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å –≤ —ç—Ç–æ–º –º–∏—Ä–µ)
- [3-4 —Ç–∞–±—É, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –º–∞–≥–∏–µ–π, —Ä–µ–ª–∏–≥–∏–µ–π –∏–ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –Ω–æ—Ä–º–∞–º–∏]

## –°–¢–ê–†–¢–û–í–ê–Ø –õ–û–ö–ê–¶–ò–Ø
- –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ
- –ö–ª—é—á–µ–≤—ã–µ NPC –∏ –∏—Ö —Ä–æ–ª–∏
- –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏

## –ö–õ–Æ–ß–ï–í–´–ï –§–†–ê–ö–¶–ò–ò
- [4-5 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—Ä–∞–∫—Ü–∏–π —Å –∏—Ö —Ü–µ–ª—è–º–∏, –º–µ—Ç–æ–¥–∞–º–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏]

## –ú–ò–†–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –Ω–∞—Ä—É—à–∞–π —ç—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞!)
1. [–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω –º–∏—Ä–∞]
2. [–ú–∞–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ]
3. [–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞]
4. [–ü—Ä–∏—Ä–æ–¥–Ω—ã–π –∑–∞–∫–æ–Ω]
5. [–†–µ–ª–∏–≥–∏–æ–∑–Ω–∞—è –¥–æ–≥–º–∞]
6. [–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –∏—Å—Ç–∏–Ω–∞]
7. [–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–Ω—Ü–∏–ø]

–°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –º–∏—Ä —Å —á–µ—Ç–∫–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π. –í—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–æ–≥–∏—á–Ω–æ —Å–≤—è–∑–∞–Ω–æ –º–µ–∂–¥—É —Å–æ–±–æ–π."""

            response = self.client.chat.completions.create(
                model=self.models["world"],
                messages=[{"role": "user", "content": world_prompt}],
                max_completion_tokens=2000,
                temperature=0.9
            )
            
            self.world_bible = response.choices[0].message.content
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ë–∏–±–ª–∏—é –º–∏—Ä–∞ –≤ —Ñ–∞–π–ª
            with open("world_bible.md", 'w', encoding='utf-8') as f:
                f.write(self.world_bible)
            
            print("‚úÖ –ë–∏–±–ª–∏—è –º–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ë–∏–±–ª–∏–∏ –º–∏—Ä–∞: {e}")
            self.world_bible = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–∏–±–ª–∏–∏ –º–∏—Ä–∞"

    def initialize_story_arc(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—é–∂–µ—Ç: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."""
        has_previous_story = os.path.exists(self.story_file)

        if has_previous_story:
            continue_previous = messagebox.askyesno(
                "–†–µ–∂–∏–º –∏–≥—Ä—ã",
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—à–ª—É—é —Å–µ—Å—Å–∏—é –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è?\n" \
                "(–î–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ù–µ—Ç ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é)"
            )

            if continue_previous:
                self.session_mode = "continue"
                loaded = self.load_story_arc()
                if loaded and self.story_arc and not self.story_arc.startswith("–û—à–∏–±–∫–∞"):
                    self.story_status_message = "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—à–ª–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ '–°—é–∂–µ—Ç', —á—Ç–æ–±—ã –æ—Å–≤–µ–∂–∏—Ç—å –ø–ª–∞–Ω."
                else:
                    self.session_mode = "new"
                    if self.story_arc and not self.story_arc.startswith("–û—à–∏–±–∫–∞"):
                        self.story_status_message = "–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—é–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å '–°—é–∂–µ—Ç–æ–º'."
                    else:
                        detail = f" –ü—Ä–∏—á–∏–Ω–∞: {self.last_error_message}" if self.last_error_message else ""
                        self.story_status_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—à–ª—ã–π —Å—é–∂–µ—Ç –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–°—é–∂–µ—Ç'." + detail
                return

        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π —Å—Ç–∞—Ä—Ç
        self.session_mode = "new"
        created = self.generate_story_arc()
        if created and self.story_arc and not self.story_arc.startswith("–û—à–∏–±–∫–∞"):
            self.story_status_message = "–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ! –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–∞–∑–¥–µ–ª–æ–º '–°—é–∂–µ—Ç', —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏."
        else:
            detail = f" –ü—Ä–∏—á–∏–Ω–∞: {self.last_error_message}" if self.last_error_message else ""
            self.story_status_message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—é–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é '–°—é–∂–µ—Ç'." + detail

    def load_story_arc(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—é–∂–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.story_file, 'r', encoding='utf-8') as f:
                self.story_arc = f.read().strip()
            if not self.story_arc:
                raise ValueError("–ü—É—Å—Ç–æ–π —Å—é–∂–µ—Ç")
            print("üó∫Ô∏è –°—é–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω")
            self.last_error_message = ""
            self.update_system_prompt()
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—é–∂–µ—Ç–∞: {e}")
            self.last_error_message = str(e)
            self.story_arc = None
            created = self.generate_story_arc()
            return created

    def generate_story_arc(self) -> bool:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Å—é–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
        try:
            world_context = self.world_bible if self.world_bible else "–ú–∏—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            rules_context = "\n" + yaml.dump(self.game_rules, allow_unicode=True, sort_keys=False) if self.game_rules else ""

            story_prompt = f"""–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–π —Å—é–∂–µ—Ç –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ D&D:

–ú–∏—Ä:
{world_context}

–ü—Ä–∞–≤–∏–ª–∞ –∏–ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏:
{rules_context}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—é–∂–µ—Ç—É:
- –î–∞–π —è—Ä–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –∫—Ä–∞—Ç–∫–∏–π —Å–∏–Ω–æ–ø—Å–∏—Å (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
- –†–∞—Å–ø–∏—à–∏ —Å—é–∂–µ—Ç –º–∏–Ω–∏–º—É–º –Ω–∞ 3 –∞–∫—Ç–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏, –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏ –∏ –æ–∂–∏–¥–∞–µ–º—ã–º –∏—Å—Ö–æ–¥–æ–º –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∞.
- –î–æ–±–∞–≤—å 3-4 –∫–ª—é—á–µ–≤—ã—Ö NPC –∏–ª–∏ —Ñ—Ä–∞–∫—Ü–∏–∏, —á—å–∏ —Ü–µ–ª–∏ –¥–≤–∏–≥–∞—é—Ç —Å—é–∂–µ—Ç –≤–ø–µ—Ä–µ–¥.
- –û–±–æ–∑–Ω–∞—á—å 3 —Å—é–∂–µ—Ç–Ω—ã—Ö –∫—Ä—é—á–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ –∏ 3 –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–∑–≤–∏–ª–∫–∏/–≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–∞–∑–≤–∏—Ç–∏—è.
- –£–∫–∞–∂–∏ —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–ª—å –∫–∞–º–ø–∞–Ω–∏–∏ –∏ —É—Å–ª–æ–≤–∏—è –µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.
- –ü–∏—à–∏ –∫–æ–º–ø–∞–∫—Ç–Ω–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏.
- –ü–æ–º–Ω–∏, —á—Ç–æ –º–∞—Å—Ç–µ—Ä –æ–±—è–∑–∞–Ω –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∫ –∫—É–ª—å–º–∏–Ω–∞—Ü–∏—è–º, —Å–æ—Ö—Ä–∞–Ω—è—è –∏–Ω—Ç—Ä–∏–≥—É –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.
"""

            response = self.client.chat.completions.create(
                model=self.models["story"],
                messages=[{"role": "user", "content": story_prompt}],
                max_completion_tokens=1500,
                temperature=0.85
            )

            self.story_arc = response.choices[0].message.content.strip()

            with open(self.story_file, 'w', encoding='utf-8') as f:
                f.write(self.story_arc)

            print("‚úÖ –°—é–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

            self.last_error_message = ""
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—é–∂–µ—Ç–∞: {e}")
            self.last_error_message = str(e)
            self.story_arc = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—é–∂–µ—Ç–∞"
            return False

        finally:
            # –ü–æ—Å–ª–µ –ª—é–±–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—é–∂–µ—Ç–∞ –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            self.update_system_prompt()

    def update_system_prompt(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç(OpenAI) —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –º–∏—Ä–∞ –∏ —Å—é–∂–µ—Ç–∞"""
        world_context = self.world_bible if self.world_bible else "–ë–∏–±–ª–∏—è –º–∏—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
        story_arc_context = self.story_arc if self.story_arc else "–°—é–∂–µ—Ç —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"

        self.system_prompt = f"""–¢—ã –æ–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä D&D. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≤–µ—Å—Ç–∏ –∏–≥—Ä—É, —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –ø–æ–º–æ–≥–∞—Ç—å –∏–≥—Ä–æ–∫–∞–º.
        –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ä–æ–ª–∏ –º–∞—Å—Ç–µ—Ä–∞ –∏–≥—Ä—ã. –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º, –Ω–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–º.
        –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —Ä–µ–∞–≥–∏—Ä—É–π –∫–∞–∫ –º–∞—Å—Ç–µ—Ä –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.
        –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –∏–ª–∏ –º–∏—Ä–µ, –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ –∑–Ω–∞—é—â–∏–π –º–∞—Å—Ç–µ—Ä.
        –¢—ã –æ–±—è–∑–∞–Ω —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—é–∂–µ—Ç—É —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∏ –º—è–≥–∫–æ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∫ –µ–≥–æ –∫–ª—é—á–µ–≤—ã–º —Å–æ–±—ã—Ç–∏—è–º, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–≤–æ–±–æ–¥—É –≤—ã–±–æ—Ä–∞.

        –ü–†–ê–í–ò–õ–ê –ò–ì–†–´:
        - –í—Å–µ–≥–¥–∞ –±—Ä–æ—Å–∞–π –∫–æ—Å—Ç–∏ –∑–∞ –∫–∞–¥—Ä–æ–º –∏ —Å–æ–æ–±—â–∞–π –≥–æ—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        - –ò—Å–ø–æ–ª—å–∑—É–π —à–∫–∞–ª—É —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π: –¢—Ä–∏–≤–∏–∞–ª—å–Ω–∞—è(5), –õ–µ–≥–∫–∞—è(10), –°—Ä–µ–¥–Ω—è—è(15), –°–ª–æ–∂–Ω–∞—è(20), –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–∞—è(25), –ü–æ—á—Ç–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞—è(30)
        - –î–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–π d20 + –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        - –î–ª—è –∞—Ç–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–π d20 + –±–æ–Ω—É—Å –∞—Ç–∞–∫–∏ –ø—Ä–æ—Ç–∏–≤ –ö–ª–∞—Å—Å–∞ –ë—Ä–æ–Ω–∏ (AC)
        - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä –Ω–∞ 20, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–∞—Ö –Ω–∞ 1
        - –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤: 50-200 —Å–ª–æ–≤, –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ 100 —Å–ª–æ–≤

        –í–ê–ñ–ù–û: –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π –ø—Ä–∞–≤–∏–ª–∞–º –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º –º–∏—Ä–∞ –∏–∑ –ë–∏–±–ª–∏–∏ –º–∏—Ä–∞:
        {world_context}

        –¢–ï–ö–£–©–ò–ô –°–Æ–ñ–ï–¢ –ö–ê–ú–ü–ê–ù–ò–ò (—Å–ª–µ–¥—É–π –µ–º—É –±–µ–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π, –Ω–∞–ø—Ä–∞–≤–ª—è–π –∏–≥—Ä–æ–∫–æ–≤ –∫ –∫—É–ª—å–º–∏–Ω–∞—Ü–∏—è–º –∏ —Ñ–∏–Ω–∞–ª—É):
        {story_arc_context}

        –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –Ω–∞—Ä—É—à–∞–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –º–∏—Ä–∞ –∏ —Å–ª–µ–¥—É–π –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ç–æ–Ω—É –∏ —Å—Ç–∏–ª—é."""

    def detect_and_roll_dice(self, user_input: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω—ã –ª–∏ –±—Ä–æ—Å–∫–∏ –∫–æ—Å—Ç–µ–π –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Ö"""
        dice_results = []
        
        # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—Ä–æ—Å–∫–æ–≤
        auto_roll_keywords = {
            '–∞—Ç–∞–∫–∞': ('d20', 0),  # –ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞
            '—É—Ä–æ–Ω': ('d8', 0),    # –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω –º–µ—á–∞
            '–ø—Ä–æ–≤–µ—Ä–∫–∞': ('d20', 0),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            '—Å–ø–∞—Å–±—Ä–æ—Å–æ–∫': ('d20', 0),  # –°–ø–∞—Å–±—Ä–æ—Å–æ–∫
            '–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞': ('d20', 0),  # –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞
            '—Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å': ('d20', 0),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏
            '–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ': ('d20', 0),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
            '–º–∞–≥–∏—è': ('d20', 0),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–≥–∏–∏
            '—É–±–µ–∂–¥–µ–Ω–∏–µ': ('d20', 0),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–±–µ–∂–¥–µ–Ω–∏—è
            '–∑–∞–ø—É–≥–∏–≤–∞–Ω–∏–µ': ('d20', 0),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É–≥–∏–≤–∞–Ω–∏—è
            '–∞—Ç–ª–µ—Ç–∏–∫–∞': ('d20', 0),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç–ª–µ—Ç–∏–∫–∏
            '–∞–∫—Ä–æ–±–∞—Ç–∏–∫–∞': ('d20', 0),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ä–æ–±–∞—Ç–∏–∫–∏
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –±—Ä–æ—Å–∫–æ–≤
        for keyword, (dice_type, modifier) in auto_roll_keywords.items():
            if keyword in user_input.lower():
                result = dice_roller.roll_dice(f"{dice_type}+{modifier}")
                dice_results.append(dice_roller.format_roll_result(result))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±—Ä–æ—Å–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä "–±—Ä–æ—Å–∞—é d20", "–∫–∏–¥–∞—é –∫–æ—Å—Ç–∏")
        dice_patterns = [
            r'–±—Ä–æ—Å–∞—é?\s+(d\d+)',
            r'–∫–∏–¥–∞—é?\s+(d\d+)',
            r'–±—Ä–æ—Å–æ–∫\s+(d\d+)',
            r'(\d*d\d+\+?\d*)',
        ]
        
        for pattern in dice_patterns:
            matches = re.findall(pattern, user_input.lower())
            for match in matches:
                if isinstance(match, tuple):
                    match = match[0]
                result = dice_roller.roll_dice(match)
                dice_results.append(dice_roller.format_roll_result(result))
        
        return dice_results
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        colors = self.theme
        fonts = self.fonts

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(
            self.root,
            bg=colors["bg_dark"],
            pady=10
        )
        title_frame.pack(fill='x', padx=20, pady=(10, 0))

        title_label = tk.Label(
            title_frame,
            text="üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ D&D —Å AI –º–∞—Å—Ç–µ—Ä–æ–º! üé≤",
            font=fonts["title"],
            bg=colors["bg_dark"],
            fg=colors["accent_light"]
        )
        title_label.pack()

        subtitle_label = tk.Label(
            title_frame,
            text="–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é: –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è, –∞ –º–∞—Å—Ç–µ—Ä –ø–æ–≤–µ–¥–∞–µ—Ç, —á—Ç–æ —Å–∫—Ä—ã–≤–∞—é—Ç —Ç–µ–Ω–∏ –º–∏—Ä–∞.",
            font=fonts["text"],
            bg=colors["bg_dark"],
            fg=colors["text_muted"]
        )
        subtitle_label.pack()

        # –û–±–ª–∞—Å—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        chat_frame = tk.Frame(
            self.root,
            bg=colors["bg_panel"],
            highlightbackground=colors["accent_muted"],
            highlightthickness=1,
            bd=0,
            padx=10,
            pady=10
        )
        chat_frame.pack(fill='both', expand=True, padx=20, pady=15)

        chat_label = tk.Label(
            chat_frame,
            text="–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è:",
            font=fonts["subtitle"],
            bg=colors["bg_panel"],
            fg=colors["accent_light"]
        )
        chat_label.pack(anchor='w', padx=5, pady=(0, 4))

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        self.chat_display = scrolledtext.ScrolledText(
            chat_frame,
            wrap=tk.WORD,
            width=70,
            height=20,
            font=fonts["text"],
            bg=colors["bg_card"],
            fg=colors["text_dark"],
            state='disabled',
            relief='flat',
            borderwidth=0,
            highlightthickness=0,
            insertbackground=colors["text_dark"],
            selectbackground=colors["accent"],
            selectforeground=colors["text_dark"],
            padx=10,
            pady=10
        )
        try:
            self.chat_display.config(disabledbackground=colors["bg_card"], disabledforeground=colors["text_dark"])
        except tk.TclError:
            pass
        self.chat_display.pack(fill='both', expand=True, padx=5, pady=5)
        self.chat_display.tag_configure("speaker_master", foreground=colors["accent"], font=fonts["button"])
        self.chat_display.tag_configure("speaker_player", foreground=colors["button_primary"], font=fonts["button"])
        self.chat_display.tag_configure("speaker_dice", foreground=colors["dice_highlight"], font=fonts["button"])
        self.chat_display.tag_configure("speaker_other", foreground=colors["text_dark"], font=fonts["button"])
        self.chat_display.tag_configure("message_body", foreground=colors["text_dark"], font=fonts["text"])

        # –û–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞
        input_frame = tk.Frame(
            self.root,
            bg=colors["bg_panel"],
            highlightbackground=colors["accent_muted"],
            highlightthickness=1,
            bd=0,
            padx=10,
            pady=10
        )
        input_frame.pack(fill='x', padx=20, pady=(0, 20))

        input_label = tk.Label(
            input_frame,
            text="–í–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            font=fonts["subtitle"],
            bg=colors["bg_panel"],
            fg=colors["accent_light"]
        )
        input_label.pack(anchor='w', padx=5, pady=(0, 6))

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(
            input_frame,
            bg=colors["bg_panel"]
        )
        button_frame.pack(fill='x', padx=5, pady=5)

        self.input_text = tk.Text(
            button_frame,
            height=3,
            wrap=tk.WORD,
            font=fonts["text"],
            bg=colors["bg_input"],
            fg=colors["text_dark"],
            insertbackground=colors["text_dark"],
            relief='flat',
            borderwidth=0,
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
            highlightcolor=colors["accent"],
            padx=8,
            pady=6
        )
        self.input_text.pack(side='left', fill='both', expand=True, padx=(0, 5))

        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = tk.Frame(button_frame, bg=colors["bg_panel"])
        buttons_frame.pack(side='right', fill='y')

        self.send_button = tk.Button(
            buttons_frame,
            text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
            command=self.send_message,
            font=fonts["button"],
            bg=colors["button_primary"],
            fg=colors["button_text"],
            activebackground=colors["accent"],
            activeforeground=colors["text_dark"],
            relief='flat',
            bd=0,
            width=12,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"]
        )
        self.send_button.pack(pady=2)

        self.world_button = tk.Button(
            buttons_frame,
            text="–ú–∏—Ä",
            command=self.show_world_bible,
            font=fonts["button"],
            bg=colors["button_secondary"],
            fg=colors["button_text"],
            activebackground=colors["accent"],
            activeforeground=colors["text_dark"],
            relief='flat',
            bd=0,
            width=12,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"]
        )
        self.world_button.pack(pady=2)

        self.story_button = tk.Button(
            buttons_frame,
            text="–°—é–∂–µ—Ç",
            command=self.show_story_arc,
            font=fonts["button"],
            bg=colors["accent_light"],
            fg=colors["text_dark"],
            activebackground=colors["accent"],
            activeforeground=colors["text_dark"],
            relief='flat',
            bd=0,
            width=12,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"]
        )
        self.story_button.pack(pady=2)

        self.dice_button = tk.Button(
            buttons_frame,
            text="–ö–æ—Å—Ç–∏",
            command=self.show_dice_roller,
            font=fonts["button"],
            bg=colors["accent"],
            fg=colors["text_dark"],
            activebackground=colors["accent_light"],
            activeforeground=colors["text_dark"],
            relief='flat',
            bd=0,
            width=12,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"]
        )
        self.dice_button.pack(pady=2)

        self.exit_button = tk.Button(
            buttons_frame,
            text="–í—ã—Ö–æ–¥",
            command=self.exit_app,
            font=fonts["button"],
            bg=colors["button_danger"],
            fg=colors["button_text"],
            activebackground="#a42822",
            activeforeground=colors["button_text"],
            relief='flat',
            bd=0,
            width=12,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"]
        )
        self.exit_button.pack(pady=2)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.input_text.bind('<Control-Return>', lambda e: self.send_message())
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_message = (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä D&D! –Ø –≤–∞—à –º–∞—Å—Ç–µ—Ä –∏–≥—Ä—ã. –ú–∏—Ä —É–∂–µ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º. "
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–∏—Ä', —á—Ç–æ–±—ã –∏–∑—É—á–∏—Ç—å –ë–∏–±–ª–∏—é –º–∏—Ä–∞, –∏ '–°—é–∂–µ—Ç' ‚Äî —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–ª–∞–Ω –∫–∞–º–ø–∞–Ω–∏–∏. "
        )
        if self.story_status_message:
            welcome_message += self.story_status_message
        self.add_to_chat("üé≠ –ú–∞—Å—Ç–µ—Ä", welcome_message)
        
    def add_to_chat(self, sender, message):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"""
        if "–ú–∞—Å—Ç–µ—Ä" in sender:
            speaker_tag = "speaker_master"
        elif "–ò–≥—Ä–æ–∫" in sender:
            speaker_tag = "speaker_player"
        elif "–ë—Ä–æ—Å–æ–∫" in sender:
            speaker_tag = "speaker_dice"
        else:
            speaker_tag = "speaker_other"

        self.chat_display.config(state='normal')
        self.chat_display.insert(tk.END, f"{sender}: ", speaker_tag)
        self.chat_display.insert(tk.END, f"{message}\n\n", "message_body")
        self.chat_display.config(state='disabled')
        self.chat_display.see(tk.END)
        
    def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É"""
        user_input = self.input_text.get("1.0", tk.END).strip()
        
        if not user_input:
            return
            
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.input_text.delete("1.0", tk.END)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ —á–∞—Ç
        self.add_to_chat("üë§ –ò–≥—Ä–æ–∫", user_input)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–æ—Å–∫–∏ –∫–æ—Å—Ç–µ–π
        dice_results = self.detect_and_roll_dice(user_input)
        if dice_results:
            for result in dice_results:
                self.add_to_chat("üé≤ –ë—Ä–æ—Å–æ–∫", result)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.send_button.config(state='disabled', text="–î—É–º–∞–µ—Ç...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self.process_message, args=(user_input,))
        thread.daemon = True
        thread.start()
        
    def process_message(self, user_input):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            master_response = self.get_master_response(user_input)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.root.after(0, self.display_master_response, master_response)
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {str(e)}"
            self.root.after(0, self.display_master_response, error_msg)
            
    def display_master_response(self, response):
        """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ—Ç–≤–µ—Ç –º–∞—Å—Ç–µ—Ä–∞"""
        self.add_to_chat("üé≠ –ú–∞—Å—Ç–µ—Ä", response)
        
        # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
        self.send_button.config(state='normal', text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        
    def get_master_response(self, user_input):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–∞—Å—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ OpenAI API"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({"role": "user", "content": user_input})
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
            messages = [{"role": "system", "content": self.system_prompt}]
            messages.extend(self.conversation_history[-10:])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            response = self.client.chat.completions.create(
                model=self.models["master"],
                messages=messages,
                max_completion_tokens=500,
                temperature=0.8
            )
            
            master_response = response.choices[0].message.content
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–∞—Å—Ç–µ—Ä–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({"role": "assistant", "content": master_response})
            
            return master_response
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {str(e)}"
    
    def show_world_bible(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ë–∏–±–ª–∏—é –º–∏—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ"""
        if not self.world_bible:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ë–∏–±–ª–∏—è –º–∏—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return
            
        colors = self.theme
        fonts = self.fonts

        bible_window = tk.Toplevel(self.root)
        bible_window.title("üìñ –ë–∏–±–ª–∏—è –º–∏—Ä–∞")
        bible_window.geometry("900x700")
        bible_window.minsize(700, 500)
        bible_window.configure(bg=colors["bg_dark"])

        container = tk.Frame(
            bible_window,
            bg=colors["bg_panel"],
            highlightbackground=colors["accent_muted"],
            highlightthickness=1,
            bd=0,
            padx=15,
            pady=15
        )
        container.pack(fill='both', expand=True, padx=20, pady=20)

        title_label = tk.Label(
            container,
            text="üìñ –ë–∏–±–ª–∏—è –º–∏—Ä–∞",
            font=fonts["title"],
            bg=colors["bg_panel"],
            fg=colors["accent_light"]
        )
        title_label.pack(pady=(0, 12))

        bible_text = scrolledtext.ScrolledText(
            container,
            wrap=tk.WORD,
            width=100,
            height=35,
            font=fonts["text"],
            bg=colors["bg_card"],
            fg=colors["text_dark"],
            state='disabled',
            relief='flat',
            borderwidth=0,
            highlightthickness=0,
            insertbackground=colors["text_dark"],
            selectbackground=colors["accent"],
            selectforeground=colors["text_dark"],
            padx=12,
            pady=12
        )
        try:
            bible_text.config(disabledbackground=colors["bg_card"], disabledforeground=colors["text_dark"])
        except tk.TclError:
            pass
        bible_text.pack(fill='both', expand=True, padx=5, pady=5)

        bible_text.config(state='normal')
        bible_text.insert(tk.END, self.world_bible)
        bible_text.config(state='disabled')

        close_button = tk.Button(
            container,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            command=bible_window.destroy,
            font=fonts["button"],
            bg=colors["button_danger"],
            fg=colors["button_text"],
            activebackground="#a42822",
            activeforeground=colors["button_text"],
            relief='flat',
            bd=0,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
            padx=14,
            pady=6
        )
        close_button.pack(pady=10)

    def show_story_arc(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—é–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ"""
        colors = self.theme
        fonts = self.fonts

        story_window = tk.Toplevel(self.root)
        story_window.title("üó∫Ô∏è –°—é–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏")
        story_window.geometry("800x600")
        story_window.minsize(600, 450)
        story_window.configure(bg=colors["bg_dark"])

        container = tk.Frame(
            story_window,
            bg=colors["bg_panel"],
            highlightbackground=colors["accent_muted"],
            highlightthickness=1,
            bd=0,
            padx=15,
            pady=15
        )
        container.pack(fill='both', expand=True, padx=20, pady=20)

        title_label = tk.Label(
            container,
            text="üó∫Ô∏è –ü–ª–∞–Ω –∫–∞–º–ø–∞–Ω–∏–∏",
            font=fonts["title"],
            bg=colors["bg_panel"],
            fg=colors["accent_light"]
        )
        title_label.pack(pady=(0, 12))

        story_text = scrolledtext.ScrolledText(
            container,
            wrap=tk.WORD,
            width=90,
            height=30,
            font=fonts["text"],
            bg=colors["bg_card"],
            fg=colors["text_dark"],
            state='normal',
            relief='flat',
            borderwidth=0,
            highlightthickness=0,
            insertbackground=colors["text_dark"],
            selectbackground=colors["accent"],
            selectforeground=colors["text_dark"],
            padx=12,
            pady=12
        )
        story_text.pack(fill='both', expand=True, padx=5, pady=5)

        if self.story_arc and not self.story_arc.startswith("–û—à–∏–±–∫–∞"):
            story_content = self.story_arc
            story_state = 'disabled'
        else:
            story_content = "–°—é–∂–µ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π."
            story_state = 'normal'

        story_text.insert(tk.END, story_content)
        story_text.config(state=story_state)
        try:
            story_text.config(disabledbackground=colors["bg_card"], disabledforeground=colors["text_dark"])
        except tk.TclError:
            pass

        buttons_bar = tk.Frame(container, bg=colors["bg_panel"])
        buttons_bar.pack(fill='x', pady=(12, 0))

        def regenerate_story():
            if not messagebox.askyesno(
                "–ù–æ–≤—ã–π —Å—é–∂–µ—Ç",
                "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å—é–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏? –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω."
            ):
                return

            created = self.generate_story_arc()
            if created and self.story_arc and not self.story_arc.startswith("–û—à–∏–±–∫–∞"):
                story_text.config(state='normal')
                story_text.delete("1.0", tk.END)
                story_text.insert(tk.END, self.story_arc)
                story_text.config(state='disabled')
                messagebox.showinfo("–°—é–∂–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω", "–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å—é–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏. –í–µ–¥—É—â–∏–π –±—É–¥–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –µ–º—É.")
                self.session_mode = "new"
                self.story_status_message = "–°—é–∂–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–∞–∑–¥–µ–ª–æ–º '–°—é–∂–µ—Ç', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏."
                self.add_to_chat("üé≠ –ú–∞—Å—Ç–µ—Ä", "–°—é–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ–±–Ω–æ–≤–∏–ª—Å—è. –°–ª–µ–¥—É–µ–º –Ω–æ–≤–æ–º—É –ø–ª–∞–Ω—É –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è!")
            else:
                story_text.config(state='normal')
                story_text.delete("1.0", tk.END)
                failure_text = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—é–∂–µ—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
                if self.last_error_message:
                    failure_text += f"\n\n–ü—Ä–∏—á–∏–Ω–∞: {self.last_error_message}"
                story_text.insert(tk.END, failure_text)
                story_text.config(state='disabled')
                message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—é–∂–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                if self.last_error_message:
                    message += f"\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {self.last_error_message}"
                messagebox.showerror("–û—à–∏–±–∫–∞", message)
                self.story_status_message = "–°—é–∂–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–°—é–∂–µ—Ç'."
                self.add_to_chat("üé≠ –ú–∞—Å—Ç–µ—Ä", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—é–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")

        regenerate_button = tk.Button(
            buttons_bar,
            text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å—é–∂–µ—Ç",
            command=regenerate_story,
            font=fonts["button"],
            bg=colors["button_primary"],
            fg=colors["button_text"],
            activebackground=colors["accent"],
            activeforeground=colors["text_dark"],
            relief='flat',
            bd=0,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
            padx=12,
            pady=6
        )
        regenerate_button.pack(side='left')

        close_button = tk.Button(
            buttons_bar,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            command=story_window.destroy,
            font=fonts["button"],
            bg=colors["button_danger"],
            fg=colors["button_text"],
            activebackground="#a42822",
            activeforeground=colors["button_text"],
            relief='flat',
            bd=0,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
            padx=12,
            pady=6
        )
        close_button.pack(side='right')

    def show_dice_roller(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–µ–π"""
        colors = self.theme
        fonts = self.fonts

        dice_window = tk.Toplevel(self.root)
        dice_window.title("üé≤ –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π")
        dice_window.geometry("500x400")
        dice_window.minsize(420, 360)
        dice_window.configure(bg=colors["bg_dark"])

        container = tk.Frame(
            dice_window,
            bg=colors["bg_panel"],
            highlightbackground=colors["accent_muted"],
            highlightthickness=1,
            bd=0,
            padx=15,
            pady=15
        )
        container.pack(fill='both', expand=True, padx=20, pady=20)

        title_label = tk.Label(
            container,
            text="üé≤ –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π",
            font=fonts["title"],
            bg=colors["bg_panel"],
            fg=colors["accent_light"]
        )
        title_label.pack(pady=(0, 12))

        input_frame = tk.Frame(container, bg=colors["bg_panel"])
        input_frame.pack(fill='x', padx=5, pady=10)

        tk.Label(
            input_frame,
            text="–í–≤–µ–¥–∏—Ç–µ –±—Ä–æ—Å–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: d20, 2d6+3):",
            font=fonts["text"],
            bg=colors["bg_panel"],
            fg=colors["accent_light"]
        ).pack(anchor='w')

        dice_input = tk.Entry(
            input_frame,
            font=fonts["text"],
            width=20,
            bg=colors["bg_input"],
            fg=colors["text_dark"],
            insertbackground=colors["text_dark"],
            relief='flat',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
            highlightcolor=colors["accent"]
        )
        dice_input.pack(side='left', padx=(0, 10), pady=(6, 0))

        roll_button = tk.Button(
            input_frame,
            text="–ë—Ä–æ—Å–∏—Ç—å",
            command=lambda: self.roll_dice_from_input(dice_input, result_text),
            font=fonts["button"],
            bg=colors["button_primary"],
            fg=colors["button_text"],
            activebackground=colors["accent"],
            activeforeground=colors["text_dark"],
            relief='flat',
            bd=0,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
            padx=12,
            pady=4
        )
        roll_button.pack(side='left', pady=(6, 0))

        quick_frame = tk.Frame(container, bg=colors["bg_panel"])
        quick_frame.pack(fill='x', padx=5, pady=5)

        tk.Label(
            quick_frame,
            text="–ë—ã—Å—Ç—Ä—ã–µ –±—Ä–æ—Å–∫–∏:",
            font=fonts["text"],
            bg=colors["bg_panel"],
            fg=colors["accent_light"]
        ).pack(anchor='w')

        quick_buttons_frame = tk.Frame(quick_frame, bg=colors["bg_panel"])
        quick_buttons_frame.pack(fill='x', pady=5)

        quick_dice = ['d20', 'd12', 'd10', 'd8', 'd6', 'd4']
        for dice in quick_dice:
            btn = tk.Button(
                quick_buttons_frame,
                text=dice,
                command=lambda d=dice: self.quick_roll(d, result_text),
                font=fonts["text"],
                bg=colors["accent"],
                fg=colors["text_dark"],
                activebackground=colors["accent_light"],
                activeforeground=colors["text_dark"],
                relief='flat',
                bd=0,
                width=6,
                cursor='hand2',
                highlightthickness=1,
                highlightbackground=colors["accent_muted"]
            )
            btn.pack(side='left', padx=3, pady=2)

        result_text = scrolledtext.ScrolledText(
            container,
            wrap=tk.WORD,
            width=50,
            height=15,
            font=fonts["text"],
            bg=colors["bg_card"],
            fg=colors["text_dark"],
            state='disabled',
            relief='flat',
            borderwidth=0,
            highlightthickness=0,
            insertbackground=colors["text_dark"],
            selectbackground=colors["accent"],
            selectforeground=colors["text_dark"],
            padx=10,
            pady=10
        )
        try:
            result_text.config(disabledbackground=colors["bg_card"], disabledforeground=colors["text_dark"])
        except tk.TclError:
            pass
        result_text.pack(fill='both', expand=True, padx=5, pady=10)

        close_button = tk.Button(
            container,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            command=dice_window.destroy,
            font=fonts["button"],
            bg=colors["button_danger"],
            fg=colors["button_text"],
            activebackground="#a42822",
            activeforeground=colors["button_text"],
            relief='flat',
            bd=0,
            cursor='hand2',
            highlightthickness=1,
            highlightbackground=colors["accent_muted"],
            padx=14,
            pady=6
        )
        close_button.pack(pady=10)
    
    def roll_dice_from_input(self, input_widget, result_widget):
        """–ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏ –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞"""
        dice_string = input_widget.get().strip()
        if not dice_string:
            return
        
        result = dice_roller.roll_dice(dice_string)
        formatted_result = dice_roller.format_roll_result(result)
        
        result_widget.config(state='normal')
        result_widget.insert(tk.END, f"{formatted_result}\n")
        result_widget.config(state='disabled')
        result_widget.see(tk.END)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
        self.add_to_chat("üé≤ –ë—Ä–æ—Å–æ–∫", formatted_result)
    
    def quick_roll(self, dice_string, result_widget):
        """–ë—ã—Å—Ç—Ä—ã–π –±—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π"""
        result = dice_roller.roll_dice(dice_string)
        formatted_result = dice_roller.format_roll_result(result)
        
        result_widget.config(state='normal')
        result_widget.insert(tk.END, f"{formatted_result}\n")
        result_widget.config(state='disabled')
        result_widget.see(tk.END)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
        self.add_to_chat("üé≤ –ë—Ä–æ—Å–æ–∫", formatted_result)
    
    def exit_app(self):
        """–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if messagebox.askyesno("–í—ã—Ö–æ–¥", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã?"):
            self.root.quit()
            self.root.destroy()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    try:
        app = DnDMasterGUI()
        app.run()
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}")

if __name__ == "__main__":
    main()
